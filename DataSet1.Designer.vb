'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet1
    Inherits Global.System.Data.DataSet
    
    Private tablesqlite_sequence As sqlite_sequenceDataTable
    
    Private tabletblAVTTest As tblAVTTestDataTable
    
    Private tabletblCond As tblCondDataTable
    
    Private tabletblMeas As tblMeasDataTable
    
    Private tabletblMeasDet As tblMeasDetDataTable
    
    Private tabletblMeasDetRb As tblMeasDetRbDataTable
    
    Private relationFK_tblCond_tblMeas_0 As Global.System.Data.DataRelation
    
    Private relationFK_tblMeas_tblAVTTest_0 As Global.System.Data.DataRelation
    
    Private relationFK_tblMeasDet_tblMeas_0 As Global.System.Data.DataRelation
    
    Private relationFK_tblMeasDetRb_tblMeasDet_0 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("sqlite_sequence")) Is Nothing) Then
                MyBase.Tables.Add(New sqlite_sequenceDataTable(ds.Tables("sqlite_sequence")))
            End If
            If (Not (ds.Tables("tblAVTTest")) Is Nothing) Then
                MyBase.Tables.Add(New tblAVTTestDataTable(ds.Tables("tblAVTTest")))
            End If
            If (Not (ds.Tables("tblCond")) Is Nothing) Then
                MyBase.Tables.Add(New tblCondDataTable(ds.Tables("tblCond")))
            End If
            If (Not (ds.Tables("tblMeas")) Is Nothing) Then
                MyBase.Tables.Add(New tblMeasDataTable(ds.Tables("tblMeas")))
            End If
            If (Not (ds.Tables("tblMeasDet")) Is Nothing) Then
                MyBase.Tables.Add(New tblMeasDetDataTable(ds.Tables("tblMeasDet")))
            End If
            If (Not (ds.Tables("tblMeasDetRb")) Is Nothing) Then
                MyBase.Tables.Add(New tblMeasDetRbDataTable(ds.Tables("tblMeasDetRb")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sqlite_sequence() As sqlite_sequenceDataTable
        Get
            Return Me.tablesqlite_sequence
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblAVTTest() As tblAVTTestDataTable
        Get
            Return Me.tabletblAVTTest
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblCond() As tblCondDataTable
        Get
            Return Me.tabletblCond
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblMeas() As tblMeasDataTable
        Get
            Return Me.tabletblMeas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblMeasDet() As tblMeasDetDataTable
        Get
            Return Me.tabletblMeasDet
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblMeasDetRb() As tblMeasDetRbDataTable
        Get
            Return Me.tabletblMeasDetRb
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("sqlite_sequence")) Is Nothing) Then
                MyBase.Tables.Add(New sqlite_sequenceDataTable(ds.Tables("sqlite_sequence")))
            End If
            If (Not (ds.Tables("tblAVTTest")) Is Nothing) Then
                MyBase.Tables.Add(New tblAVTTestDataTable(ds.Tables("tblAVTTest")))
            End If
            If (Not (ds.Tables("tblCond")) Is Nothing) Then
                MyBase.Tables.Add(New tblCondDataTable(ds.Tables("tblCond")))
            End If
            If (Not (ds.Tables("tblMeas")) Is Nothing) Then
                MyBase.Tables.Add(New tblMeasDataTable(ds.Tables("tblMeas")))
            End If
            If (Not (ds.Tables("tblMeasDet")) Is Nothing) Then
                MyBase.Tables.Add(New tblMeasDetDataTable(ds.Tables("tblMeasDet")))
            End If
            If (Not (ds.Tables("tblMeasDetRb")) Is Nothing) Then
                MyBase.Tables.Add(New tblMeasDetRbDataTable(ds.Tables("tblMeasDetRb")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablesqlite_sequence = CType(MyBase.Tables("sqlite_sequence"),sqlite_sequenceDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesqlite_sequence) Is Nothing) Then
                Me.tablesqlite_sequence.InitVars
            End If
        End If
        Me.tabletblAVTTest = CType(MyBase.Tables("tblAVTTest"),tblAVTTestDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblAVTTest) Is Nothing) Then
                Me.tabletblAVTTest.InitVars
            End If
        End If
        Me.tabletblCond = CType(MyBase.Tables("tblCond"),tblCondDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblCond) Is Nothing) Then
                Me.tabletblCond.InitVars
            End If
        End If
        Me.tabletblMeas = CType(MyBase.Tables("tblMeas"),tblMeasDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblMeas) Is Nothing) Then
                Me.tabletblMeas.InitVars
            End If
        End If
        Me.tabletblMeasDet = CType(MyBase.Tables("tblMeasDet"),tblMeasDetDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblMeasDet) Is Nothing) Then
                Me.tabletblMeasDet.InitVars
            End If
        End If
        Me.tabletblMeasDetRb = CType(MyBase.Tables("tblMeasDetRb"),tblMeasDetRbDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblMeasDetRb) Is Nothing) Then
                Me.tabletblMeasDetRb.InitVars
            End If
        End If
        Me.relationFK_tblCond_tblMeas_0 = Me.Relations("FK_tblCond_tblMeas_0")
        Me.relationFK_tblMeas_tblAVTTest_0 = Me.Relations("FK_tblMeas_tblAVTTest_0")
        Me.relationFK_tblMeasDet_tblMeas_0 = Me.Relations("FK_tblMeasDet_tblMeas_0")
        Me.relationFK_tblMeasDetRb_tblMeasDet_0 = Me.Relations("FK_tblMeasDetRb_tblMeasDet_0")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablesqlite_sequence = New sqlite_sequenceDataTable()
        MyBase.Tables.Add(Me.tablesqlite_sequence)
        Me.tabletblAVTTest = New tblAVTTestDataTable()
        MyBase.Tables.Add(Me.tabletblAVTTest)
        Me.tabletblCond = New tblCondDataTable()
        MyBase.Tables.Add(Me.tabletblCond)
        Me.tabletblMeas = New tblMeasDataTable()
        MyBase.Tables.Add(Me.tabletblMeas)
        Me.tabletblMeasDet = New tblMeasDetDataTable()
        MyBase.Tables.Add(Me.tabletblMeasDet)
        Me.tabletblMeasDetRb = New tblMeasDetRbDataTable()
        MyBase.Tables.Add(Me.tabletblMeasDetRb)
        Me.relationFK_tblCond_tblMeas_0 = New Global.System.Data.DataRelation("FK_tblCond_tblMeas_0", New Global.System.Data.DataColumn() {Me.tabletblMeas.IDColumn}, New Global.System.Data.DataColumn() {Me.tabletblCond.idMeasColumn}, false)
        Me.Relations.Add(Me.relationFK_tblCond_tblMeas_0)
        Me.relationFK_tblMeas_tblAVTTest_0 = New Global.System.Data.DataRelation("FK_tblMeas_tblAVTTest_0", New Global.System.Data.DataColumn() {Me.tabletblAVTTest.IDColumn}, New Global.System.Data.DataColumn() {Me.tabletblMeas.IDAVTColumn}, false)
        Me.Relations.Add(Me.relationFK_tblMeas_tblAVTTest_0)
        Me.relationFK_tblMeasDet_tblMeas_0 = New Global.System.Data.DataRelation("FK_tblMeasDet_tblMeas_0", New Global.System.Data.DataColumn() {Me.tabletblMeas.IDColumn}, New Global.System.Data.DataColumn() {Me.tabletblMeasDet.IDMeasColumn}, false)
        Me.Relations.Add(Me.relationFK_tblMeasDet_tblMeas_0)
        Me.relationFK_tblMeasDetRb_tblMeasDet_0 = New Global.System.Data.DataRelation("FK_tblMeasDetRb_tblMeasDet_0", New Global.System.Data.DataColumn() {Me.tabletblMeasDet.IDColumn}, New Global.System.Data.DataColumn() {Me.tabletblMeasDetRb.IdMeasDetColumn}, false)
        Me.Relations.Add(Me.relationFK_tblMeasDetRb_tblMeasDet_0)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializesqlite_sequence() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblAVTTest() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblCond() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblMeas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblMeasDet() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblMeasDetRb() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet1 = New DataSet1()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub sqlite_sequenceRowChangeEventHandler(ByVal sender As Object, ByVal e As sqlite_sequenceRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblAVTTestRowChangeEventHandler(ByVal sender As Object, ByVal e As tblAVTTestRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblCondRowChangeEventHandler(ByVal sender As Object, ByVal e As tblCondRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblMeasRowChangeEventHandler(ByVal sender As Object, ByVal e As tblMeasRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblMeasDetRowChangeEventHandler(ByVal sender As Object, ByVal e As tblMeasDetRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblMeasDetRbRowChangeEventHandler(ByVal sender As Object, ByVal e As tblMeasDetRbRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sqlite_sequenceDataTable
        Inherits Global.System.Data.TypedTableBase(Of sqlite_sequenceRow)
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columnseq As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sqlite_sequence"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property seqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sqlite_sequenceRow
            Get
                Return CType(Me.Rows(index),sqlite_sequenceRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event sqlite_sequenceRowChanging As sqlite_sequenceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event sqlite_sequenceRowChanged As sqlite_sequenceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event sqlite_sequenceRowDeleting As sqlite_sequenceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event sqlite_sequenceRowDeleted As sqlite_sequenceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addsqlite_sequenceRow(ByVal row As sqlite_sequenceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addsqlite_sequenceRow(ByVal name As String, ByVal seq As Long) As sqlite_sequenceRow
            Dim rowsqlite_sequenceRow As sqlite_sequenceRow = CType(Me.NewRow,sqlite_sequenceRow)
            Dim columnValuesArray() As Object = New Object() {name, seq}
            rowsqlite_sequenceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsqlite_sequenceRow)
            Return rowsqlite_sequenceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sqlite_sequenceDataTable = CType(MyBase.Clone,sqlite_sequenceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sqlite_sequenceDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnname = MyBase.Columns("name")
            Me.columnseq = MyBase.Columns("seq")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnseq = New Global.System.Data.DataColumn("seq", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseq)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newsqlite_sequenceRow() As sqlite_sequenceRow
            Return CType(Me.NewRow,sqlite_sequenceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sqlite_sequenceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sqlite_sequenceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sqlite_sequenceRowChangedEvent) Is Nothing) Then
                RaiseEvent sqlite_sequenceRowChanged(Me, New sqlite_sequenceRowChangeEvent(CType(e.Row,sqlite_sequenceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sqlite_sequenceRowChangingEvent) Is Nothing) Then
                RaiseEvent sqlite_sequenceRowChanging(Me, New sqlite_sequenceRowChangeEvent(CType(e.Row,sqlite_sequenceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sqlite_sequenceRowDeletedEvent) Is Nothing) Then
                RaiseEvent sqlite_sequenceRowDeleted(Me, New sqlite_sequenceRowChangeEvent(CType(e.Row,sqlite_sequenceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sqlite_sequenceRowDeletingEvent) Is Nothing) Then
                RaiseEvent sqlite_sequenceRowDeleting(Me, New sqlite_sequenceRowChangeEvent(CType(e.Row,sqlite_sequenceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removesqlite_sequenceRow(ByVal row As sqlite_sequenceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sqlite_sequenceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblAVTTestDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblAVTTestRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCR As Global.System.Data.DataColumn
        
        Private columnUUTModel As Global.System.Data.DataColumn
        
        Private columnSerialNo As Global.System.Data.DataColumn
        
        Private columnHWRevision As Global.System.Data.DataColumn
        
        Private columnComponentID As Global.System.Data.DataColumn
        
        Private columnSWID As Global.System.Data.DataColumn
        
        Private columnTestStart As Global.System.Data.DataColumn
        
        Private columnTestFinish As Global.System.Data.DataColumn
        
        Private columnTestEngName As Global.System.Data.DataColumn
        
        Private columnTestStation As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblAVTTest"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property UUTModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUUTModel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SerialNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerialNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property HWRevisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHWRevision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ComponentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComponentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SWIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TestStartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestStart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TestFinishColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestFinish
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TestEngNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestEngName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TestStationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestStation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblAVTTestRow
            Get
                Return CType(Me.Rows(index),tblAVTTestRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblAVTTestRowChanging As tblAVTTestRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblAVTTestRowChanged As tblAVTTestRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblAVTTestRowDeleting As tblAVTTestRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblAVTTestRowDeleted As tblAVTTestRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblAVTTestRow(ByVal row As tblAVTTestRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblAVTTestRow(ByVal ID As Long, ByVal CR As String, ByVal UUTModel As String, ByVal SerialNo As String, ByVal HWRevision As String, ByVal ComponentID As String, ByVal SWID As String, ByVal TestStart As Date, ByVal TestFinish As Date, ByVal TestEngName As String, ByVal TestStation As String) As tblAVTTestRow
            Dim rowtblAVTTestRow As tblAVTTestRow = CType(Me.NewRow,tblAVTTestRow)
            Dim columnValuesArray() As Object = New Object() {ID, CR, UUTModel, SerialNo, HWRevision, ComponentID, SWID, TestStart, TestFinish, TestEngName, TestStation}
            rowtblAVTTestRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblAVTTestRow)
            Return rowtblAVTTestRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Long) As tblAVTTestRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblAVTTestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblAVTTestDataTable = CType(MyBase.Clone,tblAVTTestDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblAVTTestDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnCR = MyBase.Columns("CR")
            Me.columnUUTModel = MyBase.Columns("UUTModel")
            Me.columnSerialNo = MyBase.Columns("SerialNo")
            Me.columnHWRevision = MyBase.Columns("HWRevision")
            Me.columnComponentID = MyBase.Columns("ComponentID")
            Me.columnSWID = MyBase.Columns("SWID")
            Me.columnTestStart = MyBase.Columns("TestStart")
            Me.columnTestFinish = MyBase.Columns("TestFinish")
            Me.columnTestEngName = MyBase.Columns("TestEngName")
            Me.columnTestStation = MyBase.Columns("TestStation")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCR = New Global.System.Data.DataColumn("CR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCR)
            Me.columnUUTModel = New Global.System.Data.DataColumn("UUTModel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUUTModel)
            Me.columnSerialNo = New Global.System.Data.DataColumn("SerialNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerialNo)
            Me.columnHWRevision = New Global.System.Data.DataColumn("HWRevision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHWRevision)
            Me.columnComponentID = New Global.System.Data.DataColumn("ComponentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComponentID)
            Me.columnSWID = New Global.System.Data.DataColumn("SWID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWID)
            Me.columnTestStart = New Global.System.Data.DataColumn("TestStart", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestStart)
            Me.columnTestFinish = New Global.System.Data.DataColumn("TestFinish", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestFinish)
            Me.columnTestEngName = New Global.System.Data.DataColumn("TestEngName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestEngName)
            Me.columnTestStation = New Global.System.Data.DataColumn("TestStation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestStation)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCR}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnCR.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblAVTTestRow() As tblAVTTestRow
            Return CType(Me.NewRow,tblAVTTestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblAVTTestRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblAVTTestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblAVTTestRowChangedEvent) Is Nothing) Then
                RaiseEvent tblAVTTestRowChanged(Me, New tblAVTTestRowChangeEvent(CType(e.Row,tblAVTTestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblAVTTestRowChangingEvent) Is Nothing) Then
                RaiseEvent tblAVTTestRowChanging(Me, New tblAVTTestRowChangeEvent(CType(e.Row,tblAVTTestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblAVTTestRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblAVTTestRowDeleted(Me, New tblAVTTestRowChangeEvent(CType(e.Row,tblAVTTestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblAVTTestRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblAVTTestRowDeleting(Me, New tblAVTTestRowChangeEvent(CType(e.Row,tblAVTTestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblAVTTestRow(ByVal row As tblAVTTestRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblAVTTestDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblCondDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblCondRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnidMeas As Global.System.Data.DataColumn
        
        Private columnCondTxt As Global.System.Data.DataColumn
        
        Private columnCondOrder As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblCond"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property idMeasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidMeas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CondTxtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCondTxt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CondOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCondOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblCondRow
            Get
                Return CType(Me.Rows(index),tblCondRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblCondRowChanging As tblCondRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblCondRowChanged As tblCondRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblCondRowDeleting As tblCondRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblCondRowDeleted As tblCondRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblCondRow(ByVal row As tblCondRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblCondRow(ByVal ID As Long, ByVal parenttblMeasRowByFK_tblCond_tblMeas_0 As tblMeasRow, ByVal CondTxt As String, ByVal CondOrder As Integer) As tblCondRow
            Dim rowtblCondRow As tblCondRow = CType(Me.NewRow,tblCondRow)
            Dim columnValuesArray() As Object = New Object() {ID, Nothing, CondTxt, CondOrder}
            If (Not (parenttblMeasRowByFK_tblCond_tblMeas_0) Is Nothing) Then
                columnValuesArray(1) = parenttblMeasRowByFK_tblCond_tblMeas_0(0)
            End If
            rowtblCondRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblCondRow)
            Return rowtblCondRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Long) As tblCondRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblCondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblCondDataTable = CType(MyBase.Clone,tblCondDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblCondDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnidMeas = MyBase.Columns("idMeas")
            Me.columnCondTxt = MyBase.Columns("CondTxt")
            Me.columnCondOrder = MyBase.Columns("CondOrder")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnidMeas = New Global.System.Data.DataColumn("idMeas", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidMeas)
            Me.columnCondTxt = New Global.System.Data.DataColumn("CondTxt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCondTxt)
            Me.columnCondOrder = New Global.System.Data.DataColumn("CondOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCondOrder)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblCondRow() As tblCondRow
            Return CType(Me.NewRow,tblCondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblCondRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblCondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblCondRowChangedEvent) Is Nothing) Then
                RaiseEvent tblCondRowChanged(Me, New tblCondRowChangeEvent(CType(e.Row,tblCondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblCondRowChangingEvent) Is Nothing) Then
                RaiseEvent tblCondRowChanging(Me, New tblCondRowChangeEvent(CType(e.Row,tblCondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblCondRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblCondRowDeleted(Me, New tblCondRowChangeEvent(CType(e.Row,tblCondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblCondRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblCondRowDeleting(Me, New tblCondRowChangeEvent(CType(e.Row,tblCondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblCondRow(ByVal row As tblCondRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblCondDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblMeasDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblMeasRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnIDAVT As Global.System.Data.DataColumn
        
        Private columnIDMeas As Global.System.Data.DataColumn
        
        Private columnTambient As Global.System.Data.DataColumn
        
        Private columnTcoolant As Global.System.Data.DataColumn
        
        Private columnMeasOrder As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblMeas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDAVTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDAVT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDMeasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDMeas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TambientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTambient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TcoolantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTcoolant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MeasOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMeasOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblMeasRow
            Get
                Return CType(Me.Rows(index),tblMeasRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMeasRowChanging As tblMeasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMeasRowChanged As tblMeasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMeasRowDeleting As tblMeasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMeasRowDeleted As tblMeasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblMeasRow(ByVal row As tblMeasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblMeasRow(ByVal ID As Long, ByVal parenttblAVTTestRowByFK_tblMeas_tblAVTTest_0 As tblAVTTestRow, ByVal IDMeas As String, ByVal Tambient As Double, ByVal Tcoolant As Double, ByVal MeasOrder As Long) As tblMeasRow
            Dim rowtblMeasRow As tblMeasRow = CType(Me.NewRow,tblMeasRow)
            Dim columnValuesArray() As Object = New Object() {ID, Nothing, IDMeas, Tambient, Tcoolant, MeasOrder}
            If (Not (parenttblAVTTestRowByFK_tblMeas_tblAVTTest_0) Is Nothing) Then
                columnValuesArray(1) = parenttblAVTTestRowByFK_tblMeas_tblAVTTest_0(0)
            End If
            rowtblMeasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblMeasRow)
            Return rowtblMeasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Long) As tblMeasRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblMeasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblMeasDataTable = CType(MyBase.Clone,tblMeasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblMeasDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnIDAVT = MyBase.Columns("IDAVT")
            Me.columnIDMeas = MyBase.Columns("IDMeas")
            Me.columnTambient = MyBase.Columns("Tambient")
            Me.columnTcoolant = MyBase.Columns("Tcoolant")
            Me.columnMeasOrder = MyBase.Columns("MeasOrder")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnIDAVT = New Global.System.Data.DataColumn("IDAVT", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDAVT)
            Me.columnIDMeas = New Global.System.Data.DataColumn("IDMeas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDMeas)
            Me.columnTambient = New Global.System.Data.DataColumn("Tambient", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTambient)
            Me.columnTcoolant = New Global.System.Data.DataColumn("Tcoolant", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTcoolant)
            Me.columnMeasOrder = New Global.System.Data.DataColumn("MeasOrder", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeasOrder)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblMeasRow() As tblMeasRow
            Return CType(Me.NewRow,tblMeasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblMeasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblMeasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblMeasRowChangedEvent) Is Nothing) Then
                RaiseEvent tblMeasRowChanged(Me, New tblMeasRowChangeEvent(CType(e.Row,tblMeasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblMeasRowChangingEvent) Is Nothing) Then
                RaiseEvent tblMeasRowChanging(Me, New tblMeasRowChangeEvent(CType(e.Row,tblMeasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblMeasRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblMeasRowDeleted(Me, New tblMeasRowChangeEvent(CType(e.Row,tblMeasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblMeasRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblMeasRowDeleting(Me, New tblMeasRowChangeEvent(CType(e.Row,tblMeasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblMeasRow(ByVal row As tblMeasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblMeasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblMeasDetDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblMeasDetRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnIDMeas As Global.System.Data.DataColumn
        
        Private columnMeasOrd As Global.System.Data.DataColumn
        
        Private column_UiL1 As Global.System.Data.DataColumn
        
        Private column_IiL1 As Global.System.Data.DataColumn
        
        Private column_PiL1 As Global.System.Data.DataColumn
        
        Private column_FreqUiL1 As Global.System.Data.DataColumn
        
        Private column_PFiL1 As Global.System.Data.DataColumn
        
        Private column_UiL2 As Global.System.Data.DataColumn
        
        Private column_IiL2 As Global.System.Data.DataColumn
        
        Private column_PiL2 As Global.System.Data.DataColumn
        
        Private column_FreqUiL2 As Global.System.Data.DataColumn
        
        Private column_PFiL2 As Global.System.Data.DataColumn
        
        Private column_UiL3 As Global.System.Data.DataColumn
        
        Private column_IiL3 As Global.System.Data.DataColumn
        
        Private column_PiL3 As Global.System.Data.DataColumn
        
        Private column_FreqUiL3 As Global.System.Data.DataColumn
        
        Private column_PFiL3 As Global.System.Data.DataColumn
        
        Private column_Pi As Global.System.Data.DataColumn
        
        Private column_Pfi As Global.System.Data.DataColumn
        
        Private _column_ViSet_ As Global.System.Data.DataColumn
        
        Private column_IbatSet As Global.System.Data.DataColumn
        
        Private column_Ibat As Global.System.Data.DataColumn
        
        Private column_Vbat As Global.System.Data.DataColumn
        
        Private column_Pbat As Global.System.Data.DataColumn
        
        Private _column_Pd_ As Global.System.Data.DataColumn
        
        Private column_Eta As Global.System.Data.DataColumn
        
        Private column_nHarmOrd As Global.System.Data.DataColumn
        
        Private column_thdTot As Global.System.Data.DataColumn
        
        Private column_nHarmI As Global.System.Data.DataColumn
        
        Private column_nHarmLim As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblMeasDet"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDMeasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDMeas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MeasOrdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMeasOrd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _UiL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_UiL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _IiL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_IiL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _PiL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_PiL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _FreqUiL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_FreqUiL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _PFiL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_PFiL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _UiL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_UiL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _IiL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_IiL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _PiL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_PiL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _FreqUiL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_FreqUiL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _PFiL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_PFiL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _UiL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_UiL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _IiL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_IiL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _PiL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_PiL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _FreqUiL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_FreqUiL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _PFiL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_PFiL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _PiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_Pi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _PfiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_Pfi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property __ViSet_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_ViSet_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _IbatSetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_IbatSet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _IbatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_Ibat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _VbatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_Vbat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _PbatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_Pbat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property __Pd_Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_Pd_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _EtaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_Eta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _nHarmOrdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_nHarmOrd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _thdTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_thdTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _nHarmIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_nHarmI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _nHarmLimColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_nHarmLim
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblMeasDetRow
            Get
                Return CType(Me.Rows(index),tblMeasDetRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMeasDetRowChanging As tblMeasDetRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMeasDetRowChanged As tblMeasDetRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMeasDetRowDeleting As tblMeasDetRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMeasDetRowDeleted As tblMeasDetRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblMeasDetRow(ByVal row As tblMeasDetRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblMeasDetRow( _
                    ByVal ID As Long,  _
                    ByVal parenttblMeasRowByFK_tblMeasDet_tblMeas_0 As tblMeasRow,  _
                    ByVal MeasOrd As Long,  _
                    ByVal _UiL1 As Double,  _
                    ByVal _IiL1 As Double,  _
                    ByVal _PiL1 As Double,  _
                    ByVal _FreqUiL1 As Double,  _
                    ByVal _PFiL1 As Double,  _
                    ByVal _UiL2 As Double,  _
                    ByVal _IiL2 As Double,  _
                    ByVal _PiL2 As Double,  _
                    ByVal _FreqUiL2 As Double,  _
                    ByVal _PFiL2 As Double,  _
                    ByVal _UiL3 As Double,  _
                    ByVal _IiL3 As Double,  _
                    ByVal _PiL3 As Double,  _
                    ByVal _FreqUiL3 As Double,  _
                    ByVal _PFiL3 As Double,  _
                    ByVal _Pi As Double,  _
                    ByVal _Pfi As Double,  _
                    ByVal __ViSet_ As Double,  _
                    ByVal _IbatSet As Double,  _
                    ByVal _Ibat As Double,  _
                    ByVal _Vbat As Double,  _
                    ByVal _Pbat As Double,  _
                    ByVal __Pd_ As Double,  _
                    ByVal _Eta As Double,  _
                    ByVal _nHarmOrd As Integer,  _
                    ByVal _thdTot As Double,  _
                    ByVal _nHarmI As Double,  _
                    ByVal _nHarmLim As Double) As tblMeasDetRow
            Dim rowtblMeasDetRow As tblMeasDetRow = CType(Me.NewRow,tblMeasDetRow)
            Dim columnValuesArray() As Object = New Object() {ID, Nothing, MeasOrd, _UiL1, _IiL1, _PiL1, _FreqUiL1, _PFiL1, _UiL2, _IiL2, _PiL2, _FreqUiL2, _PFiL2, _UiL3, _IiL3, _PiL3, _FreqUiL3, _PFiL3, _Pi, _Pfi, __ViSet_, _IbatSet, _Ibat, _Vbat, _Pbat, __Pd_, _Eta, _nHarmOrd, _thdTot, _nHarmI, _nHarmLim}
            If (Not (parenttblMeasRowByFK_tblMeasDet_tblMeas_0) Is Nothing) Then
                columnValuesArray(1) = parenttblMeasRowByFK_tblMeasDet_tblMeas_0(0)
            End If
            rowtblMeasDetRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblMeasDetRow)
            Return rowtblMeasDetRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Long) As tblMeasDetRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblMeasDetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblMeasDetDataTable = CType(MyBase.Clone,tblMeasDetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblMeasDetDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnIDMeas = MyBase.Columns("IDMeas")
            Me.columnMeasOrd = MyBase.Columns("MeasOrd")
            Me.column_UiL1 = MyBase.Columns("_UiL1")
            Me.column_IiL1 = MyBase.Columns("_IiL1")
            Me.column_PiL1 = MyBase.Columns("_PiL1")
            Me.column_FreqUiL1 = MyBase.Columns("_FreqUiL1")
            Me.column_PFiL1 = MyBase.Columns("_PFiL1")
            Me.column_UiL2 = MyBase.Columns("_UiL2")
            Me.column_IiL2 = MyBase.Columns("_IiL2")
            Me.column_PiL2 = MyBase.Columns("_PiL2")
            Me.column_FreqUiL2 = MyBase.Columns("_FreqUiL2")
            Me.column_PFiL2 = MyBase.Columns("_PFiL2")
            Me.column_UiL3 = MyBase.Columns("_UiL3")
            Me.column_IiL3 = MyBase.Columns("_IiL3")
            Me.column_PiL3 = MyBase.Columns("_PiL3")
            Me.column_FreqUiL3 = MyBase.Columns("_FreqUiL3")
            Me.column_PFiL3 = MyBase.Columns("_PFiL3")
            Me.column_Pi = MyBase.Columns("_Pi")
            Me.column_Pfi = MyBase.Columns("_Pfi")
            Me._column_ViSet_ = MyBase.Columns("_ViSet"&Global.Microsoft.VisualBasic.ChrW(10))
            Me.column_IbatSet = MyBase.Columns("_IbatSet")
            Me.column_Ibat = MyBase.Columns("_Ibat")
            Me.column_Vbat = MyBase.Columns("_Vbat")
            Me.column_Pbat = MyBase.Columns("_Pbat")
            Me._column_Pd_ = MyBase.Columns("_Pd"&Global.Microsoft.VisualBasic.ChrW(10))
            Me.column_Eta = MyBase.Columns("_Eta")
            Me.column_nHarmOrd = MyBase.Columns("_nHarmOrd")
            Me.column_thdTot = MyBase.Columns("_thdTot")
            Me.column_nHarmI = MyBase.Columns("_nHarmI")
            Me.column_nHarmLim = MyBase.Columns("_nHarmLim")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnIDMeas = New Global.System.Data.DataColumn("IDMeas", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDMeas)
            Me.columnMeasOrd = New Global.System.Data.DataColumn("MeasOrd", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeasOrd)
            Me.column_UiL1 = New Global.System.Data.DataColumn("_UiL1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_UiL1)
            Me.column_IiL1 = New Global.System.Data.DataColumn("_IiL1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_IiL1)
            Me.column_PiL1 = New Global.System.Data.DataColumn("_PiL1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_PiL1)
            Me.column_FreqUiL1 = New Global.System.Data.DataColumn("_FreqUiL1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_FreqUiL1)
            Me.column_PFiL1 = New Global.System.Data.DataColumn("_PFiL1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_PFiL1)
            Me.column_UiL2 = New Global.System.Data.DataColumn("_UiL2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_UiL2)
            Me.column_IiL2 = New Global.System.Data.DataColumn("_IiL2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_IiL2)
            Me.column_PiL2 = New Global.System.Data.DataColumn("_PiL2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_PiL2)
            Me.column_FreqUiL2 = New Global.System.Data.DataColumn("_FreqUiL2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_FreqUiL2)
            Me.column_PFiL2 = New Global.System.Data.DataColumn("_PFiL2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_PFiL2)
            Me.column_UiL3 = New Global.System.Data.DataColumn("_UiL3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_UiL3)
            Me.column_IiL3 = New Global.System.Data.DataColumn("_IiL3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_IiL3)
            Me.column_PiL3 = New Global.System.Data.DataColumn("_PiL3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_PiL3)
            Me.column_FreqUiL3 = New Global.System.Data.DataColumn("_FreqUiL3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_FreqUiL3)
            Me.column_PFiL3 = New Global.System.Data.DataColumn("_PFiL3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_PFiL3)
            Me.column_Pi = New Global.System.Data.DataColumn("_Pi", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_Pi)
            Me.column_Pfi = New Global.System.Data.DataColumn("_Pfi", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_Pfi)
            Me._column_ViSet_ = New Global.System.Data.DataColumn("_ViSet"&Global.Microsoft.VisualBasic.ChrW(10), GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._column_ViSet_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_ViSet_")
            Me._column_ViSet_.ExtendedProperties.Add("Generator_UserColumnName", "_ViSet"&Global.Microsoft.VisualBasic.ChrW(10))
            MyBase.Columns.Add(Me._column_ViSet_)
            Me.column_IbatSet = New Global.System.Data.DataColumn("_IbatSet", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_IbatSet)
            Me.column_Ibat = New Global.System.Data.DataColumn("_Ibat", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_Ibat)
            Me.column_Vbat = New Global.System.Data.DataColumn("_Vbat", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_Vbat)
            Me.column_Pbat = New Global.System.Data.DataColumn("_Pbat", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_Pbat)
            Me._column_Pd_ = New Global.System.Data.DataColumn("_Pd"&Global.Microsoft.VisualBasic.ChrW(10), GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._column_Pd_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_Pd_")
            Me._column_Pd_.ExtendedProperties.Add("Generator_UserColumnName", "_Pd"&Global.Microsoft.VisualBasic.ChrW(10))
            MyBase.Columns.Add(Me._column_Pd_)
            Me.column_Eta = New Global.System.Data.DataColumn("_Eta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_Eta)
            Me.column_nHarmOrd = New Global.System.Data.DataColumn("_nHarmOrd", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_nHarmOrd)
            Me.column_thdTot = New Global.System.Data.DataColumn("_thdTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_thdTot)
            Me.column_nHarmI = New Global.System.Data.DataColumn("_nHarmI", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_nHarmI)
            Me.column_nHarmLim = New Global.System.Data.DataColumn("_nHarmLim", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_nHarmLim)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblMeasDetRow() As tblMeasDetRow
            Return CType(Me.NewRow,tblMeasDetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblMeasDetRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblMeasDetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblMeasDetRowChangedEvent) Is Nothing) Then
                RaiseEvent tblMeasDetRowChanged(Me, New tblMeasDetRowChangeEvent(CType(e.Row,tblMeasDetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblMeasDetRowChangingEvent) Is Nothing) Then
                RaiseEvent tblMeasDetRowChanging(Me, New tblMeasDetRowChangeEvent(CType(e.Row,tblMeasDetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblMeasDetRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblMeasDetRowDeleted(Me, New tblMeasDetRowChangeEvent(CType(e.Row,tblMeasDetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblMeasDetRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblMeasDetRowDeleting(Me, New tblMeasDetRowChangeEvent(CType(e.Row,tblMeasDetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblMeasDetRow(ByVal row As tblMeasDetRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblMeasDetDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblMeasDetRbDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblMeasDetRbRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnIdMeasDet As Global.System.Data.DataColumn
        
        Private column_rbVoltL1 As Global.System.Data.DataColumn
        
        Private column_rbVolt2 As Global.System.Data.DataColumn
        
        Private column_rbVoltL3 As Global.System.Data.DataColumn
        
        Private column_rbCurrL1 As Global.System.Data.DataColumn
        
        Private column_rbCurrL2 As Global.System.Data.DataColumn
        
        Private column_rbCurrL3 As Global.System.Data.DataColumn
        
        Private column_rbIbat As Global.System.Data.DataColumn
        
        Private column_rbVbat As Global.System.Data.DataColumn
        
        Private column_rbIbatMaxAv As Global.System.Data.DataColumn
        
        Private column_rbFreq As Global.System.Data.DataColumn
        
        Private column_rbLVbat As Global.System.Data.DataColumn
        
        Private column_rbTempPerc As Global.System.Data.DataColumn
        
        Private column_rbSigTamb As Global.System.Data.DataColumn
        
        Private column_rbSigTchas As Global.System.Data.DataColumn
        
        Private column_rbSigTexCon As Global.System.Data.DataColumn
        
        Private column_rbExtSenTyp As Global.System.Data.DataColumn
        
        Private column_rbErrStatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblMeasDetRb"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IdMeasDetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdMeasDet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbVoltL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbVoltL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbVolt2Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbVolt2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbVoltL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbVoltL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbCurrL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbCurrL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbCurrL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbCurrL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbCurrL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbCurrL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbIbatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbIbat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbVbatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbVbat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbIbatMaxAvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbIbatMaxAv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbFreqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbFreq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbLVbatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbLVbat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbTempPercColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbTempPerc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbSigTambColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbSigTamb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbSigTchasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbSigTchas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbSigTexConColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbSigTexCon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbExtSenTypColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbExtSenTyp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property _rbErrStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_rbErrStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblMeasDetRbRow
            Get
                Return CType(Me.Rows(index),tblMeasDetRbRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMeasDetRbRowChanging As tblMeasDetRbRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMeasDetRbRowChanged As tblMeasDetRbRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMeasDetRbRowDeleting As tblMeasDetRbRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMeasDetRbRowDeleted As tblMeasDetRbRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblMeasDetRbRow(ByVal row As tblMeasDetRbRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblMeasDetRbRow( _
                    ByVal ID As Long,  _
                    ByVal parenttblMeasDetRowByFK_tblMeasDetRb_tblMeasDet_0 As tblMeasDetRow,  _
                    ByVal _rbVoltL1 As Double,  _
                    ByVal _rbVolt2 As Double,  _
                    ByVal _rbVoltL3 As Double,  _
                    ByVal _rbCurrL1 As Double,  _
                    ByVal _rbCurrL2 As Double,  _
                    ByVal _rbCurrL3 As Double,  _
                    ByVal _rbIbat As Double,  _
                    ByVal _rbVbat As Double,  _
                    ByVal _rbIbatMaxAv As Double,  _
                    ByVal _rbFreq As Double,  _
                    ByVal _rbLVbat As Double,  _
                    ByVal _rbTempPerc As Double,  _
                    ByVal _rbSigTamb As Double,  _
                    ByVal _rbSigTchas As Double,  _
                    ByVal _rbSigTexCon As Double,  _
                    ByVal _rbExtSenTyp As Double,  _
                    ByVal _rbErrStatus As String) As tblMeasDetRbRow
            Dim rowtblMeasDetRbRow As tblMeasDetRbRow = CType(Me.NewRow,tblMeasDetRbRow)
            Dim columnValuesArray() As Object = New Object() {ID, Nothing, _rbVoltL1, _rbVolt2, _rbVoltL3, _rbCurrL1, _rbCurrL2, _rbCurrL3, _rbIbat, _rbVbat, _rbIbatMaxAv, _rbFreq, _rbLVbat, _rbTempPerc, _rbSigTamb, _rbSigTchas, _rbSigTexCon, _rbExtSenTyp, _rbErrStatus}
            If (Not (parenttblMeasDetRowByFK_tblMeasDetRb_tblMeasDet_0) Is Nothing) Then
                columnValuesArray(1) = parenttblMeasDetRowByFK_tblMeasDetRb_tblMeasDet_0(0)
            End If
            rowtblMeasDetRbRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblMeasDetRbRow)
            Return rowtblMeasDetRbRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByID(ByVal ID As Long) As tblMeasDetRbRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblMeasDetRbRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblMeasDetRbDataTable = CType(MyBase.Clone,tblMeasDetRbDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblMeasDetRbDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnIdMeasDet = MyBase.Columns("IdMeasDet")
            Me.column_rbVoltL1 = MyBase.Columns("_rbVoltL1")
            Me.column_rbVolt2 = MyBase.Columns("_rbVolt2")
            Me.column_rbVoltL3 = MyBase.Columns("_rbVoltL3")
            Me.column_rbCurrL1 = MyBase.Columns("_rbCurrL1")
            Me.column_rbCurrL2 = MyBase.Columns("_rbCurrL2")
            Me.column_rbCurrL3 = MyBase.Columns("_rbCurrL3")
            Me.column_rbIbat = MyBase.Columns("_rbIbat")
            Me.column_rbVbat = MyBase.Columns("_rbVbat")
            Me.column_rbIbatMaxAv = MyBase.Columns("_rbIbatMaxAv")
            Me.column_rbFreq = MyBase.Columns("_rbFreq")
            Me.column_rbLVbat = MyBase.Columns("_rbLVbat")
            Me.column_rbTempPerc = MyBase.Columns("_rbTempPerc")
            Me.column_rbSigTamb = MyBase.Columns("_rbSigTamb")
            Me.column_rbSigTchas = MyBase.Columns("_rbSigTchas")
            Me.column_rbSigTexCon = MyBase.Columns("_rbSigTexCon")
            Me.column_rbExtSenTyp = MyBase.Columns("_rbExtSenTyp")
            Me.column_rbErrStatus = MyBase.Columns("_rbErrStatus")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnIdMeasDet = New Global.System.Data.DataColumn("IdMeasDet", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdMeasDet)
            Me.column_rbVoltL1 = New Global.System.Data.DataColumn("_rbVoltL1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbVoltL1)
            Me.column_rbVolt2 = New Global.System.Data.DataColumn("_rbVolt2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbVolt2)
            Me.column_rbVoltL3 = New Global.System.Data.DataColumn("_rbVoltL3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbVoltL3)
            Me.column_rbCurrL1 = New Global.System.Data.DataColumn("_rbCurrL1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbCurrL1)
            Me.column_rbCurrL2 = New Global.System.Data.DataColumn("_rbCurrL2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbCurrL2)
            Me.column_rbCurrL3 = New Global.System.Data.DataColumn("_rbCurrL3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbCurrL3)
            Me.column_rbIbat = New Global.System.Data.DataColumn("_rbIbat", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbIbat)
            Me.column_rbVbat = New Global.System.Data.DataColumn("_rbVbat", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbVbat)
            Me.column_rbIbatMaxAv = New Global.System.Data.DataColumn("_rbIbatMaxAv", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbIbatMaxAv)
            Me.column_rbFreq = New Global.System.Data.DataColumn("_rbFreq", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbFreq)
            Me.column_rbLVbat = New Global.System.Data.DataColumn("_rbLVbat", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbLVbat)
            Me.column_rbTempPerc = New Global.System.Data.DataColumn("_rbTempPerc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbTempPerc)
            Me.column_rbSigTamb = New Global.System.Data.DataColumn("_rbSigTamb", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbSigTamb)
            Me.column_rbSigTchas = New Global.System.Data.DataColumn("_rbSigTchas", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbSigTchas)
            Me.column_rbSigTexCon = New Global.System.Data.DataColumn("_rbSigTexCon", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbSigTexCon)
            Me.column_rbExtSenTyp = New Global.System.Data.DataColumn("_rbExtSenTyp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbExtSenTyp)
            Me.column_rbErrStatus = New Global.System.Data.DataColumn("_rbErrStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_rbErrStatus)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIdMeasDet}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnIdMeasDet.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblMeasDetRbRow() As tblMeasDetRbRow
            Return CType(Me.NewRow,tblMeasDetRbRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblMeasDetRbRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblMeasDetRbRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblMeasDetRbRowChangedEvent) Is Nothing) Then
                RaiseEvent tblMeasDetRbRowChanged(Me, New tblMeasDetRbRowChangeEvent(CType(e.Row,tblMeasDetRbRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblMeasDetRbRowChangingEvent) Is Nothing) Then
                RaiseEvent tblMeasDetRbRowChanging(Me, New tblMeasDetRbRowChangeEvent(CType(e.Row,tblMeasDetRbRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblMeasDetRbRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblMeasDetRbRowDeleted(Me, New tblMeasDetRbRowChangeEvent(CType(e.Row,tblMeasDetRbRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblMeasDetRbRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblMeasDetRbRowDeleting(Me, New tblMeasDetRbRowChangeEvent(CType(e.Row,tblMeasDetRbRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblMeasDetRbRow(ByVal row As tblMeasDetRbRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblMeasDetRbDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class sqlite_sequenceRow
        Inherits Global.System.Data.DataRow
        
        Private tablesqlite_sequence As sqlite_sequenceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesqlite_sequence = CType(Me.Table,sqlite_sequenceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tablesqlite_sequence.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'name' in table 'sqlite_sequence' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesqlite_sequence.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property seq() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesqlite_sequence.seqColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'seq' in table 'sqlite_sequence' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesqlite_sequence.seqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablesqlite_sequence.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetnameNull()
            Me(Me.tablesqlite_sequence.nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsseqNull() As Boolean
            Return Me.IsNull(Me.tablesqlite_sequence.seqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetseqNull()
            Me(Me.tablesqlite_sequence.seqColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblAVTTestRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblAVTTest As tblAVTTestDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblAVTTest = CType(Me.Table,tblAVTTestDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tabletblAVTTest.IDColumn),Long)
            End Get
            Set
                Me(Me.tabletblAVTTest.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CR() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAVTTest.CRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CR' in table 'tblAVTTest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAVTTest.CRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UUTModel() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAVTTest.UUTModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UUTModel' in table 'tblAVTTest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAVTTest.UUTModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SerialNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAVTTest.SerialNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerialNo' in table 'tblAVTTest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAVTTest.SerialNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property HWRevision() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAVTTest.HWRevisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HWRevision' in table 'tblAVTTest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAVTTest.HWRevisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ComponentID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAVTTest.ComponentIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ComponentID' in table 'tblAVTTest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAVTTest.ComponentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SWID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAVTTest.SWIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWID' in table 'tblAVTTest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAVTTest.SWIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TestStart() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblAVTTest.TestStartColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestStart' in table 'tblAVTTest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAVTTest.TestStartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TestFinish() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblAVTTest.TestFinishColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestFinish' in table 'tblAVTTest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAVTTest.TestFinishColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TestEngName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAVTTest.TestEngNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestEngName' in table 'tblAVTTest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAVTTest.TestEngNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TestStation() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAVTTest.TestStationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestStation' in table 'tblAVTTest' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAVTTest.TestStationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCRNull() As Boolean
            Return Me.IsNull(Me.tabletblAVTTest.CRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCRNull()
            Me(Me.tabletblAVTTest.CRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsUUTModelNull() As Boolean
            Return Me.IsNull(Me.tabletblAVTTest.UUTModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetUUTModelNull()
            Me(Me.tabletblAVTTest.UUTModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSerialNoNull() As Boolean
            Return Me.IsNull(Me.tabletblAVTTest.SerialNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSerialNoNull()
            Me(Me.tabletblAVTTest.SerialNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsHWRevisionNull() As Boolean
            Return Me.IsNull(Me.tabletblAVTTest.HWRevisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetHWRevisionNull()
            Me(Me.tabletblAVTTest.HWRevisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsComponentIDNull() As Boolean
            Return Me.IsNull(Me.tabletblAVTTest.ComponentIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetComponentIDNull()
            Me(Me.tabletblAVTTest.ComponentIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSWIDNull() As Boolean
            Return Me.IsNull(Me.tabletblAVTTest.SWIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSWIDNull()
            Me(Me.tabletblAVTTest.SWIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTestStartNull() As Boolean
            Return Me.IsNull(Me.tabletblAVTTest.TestStartColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTestStartNull()
            Me(Me.tabletblAVTTest.TestStartColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTestFinishNull() As Boolean
            Return Me.IsNull(Me.tabletblAVTTest.TestFinishColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTestFinishNull()
            Me(Me.tabletblAVTTest.TestFinishColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTestEngNameNull() As Boolean
            Return Me.IsNull(Me.tabletblAVTTest.TestEngNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTestEngNameNull()
            Me(Me.tabletblAVTTest.TestEngNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTestStationNull() As Boolean
            Return Me.IsNull(Me.tabletblAVTTest.TestStationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTestStationNull()
            Me(Me.tabletblAVTTest.TestStationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblMeasRows() As tblMeasRow()
            If (Me.Table.ChildRelations("FK_tblMeas_tblAVTTest_0") Is Nothing) Then
                Return New tblMeasRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblMeas_tblAVTTest_0")),tblMeasRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblCondRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblCond As tblCondDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblCond = CType(Me.Table,tblCondDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tabletblCond.IDColumn),Long)
            End Get
            Set
                Me(Me.tabletblCond.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property idMeas() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblCond.idMeasColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'idMeas' in table 'tblCond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCond.idMeasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CondTxt() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCond.CondTxtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CondTxt' in table 'tblCond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCond.CondTxtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CondOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblCond.CondOrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CondOrder' in table 'tblCond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCond.CondOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblMeasRow() As tblMeasRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblCond_tblMeas_0")),tblMeasRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblCond_tblMeas_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsidMeasNull() As Boolean
            Return Me.IsNull(Me.tabletblCond.idMeasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetidMeasNull()
            Me(Me.tabletblCond.idMeasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCondTxtNull() As Boolean
            Return Me.IsNull(Me.tabletblCond.CondTxtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCondTxtNull()
            Me(Me.tabletblCond.CondTxtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCondOrderNull() As Boolean
            Return Me.IsNull(Me.tabletblCond.CondOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCondOrderNull()
            Me(Me.tabletblCond.CondOrderColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblMeasRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblMeas As tblMeasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblMeas = CType(Me.Table,tblMeasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tabletblMeas.IDColumn),Long)
            End Get
            Set
                Me(Me.tabletblMeas.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IDAVT() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblMeas.IDAVTColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDAVT' in table 'tblMeas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeas.IDAVTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IDMeas() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblMeas.IDMeasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDMeas' in table 'tblMeas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeas.IDMeasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Tambient() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeas.TambientColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tambient' in table 'tblMeas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeas.TambientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Tcoolant() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeas.TcoolantColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tcoolant' in table 'tblMeas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeas.TcoolantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MeasOrder() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblMeas.MeasOrderColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MeasOrder' in table 'tblMeas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeas.MeasOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblAVTTestRow() As tblAVTTestRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblMeas_tblAVTTest_0")),tblAVTTestRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblMeas_tblAVTTest_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIDAVTNull() As Boolean
            Return Me.IsNull(Me.tabletblMeas.IDAVTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIDAVTNull()
            Me(Me.tabletblMeas.IDAVTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIDMeasNull() As Boolean
            Return Me.IsNull(Me.tabletblMeas.IDMeasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIDMeasNull()
            Me(Me.tabletblMeas.IDMeasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTambientNull() As Boolean
            Return Me.IsNull(Me.tabletblMeas.TambientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTambientNull()
            Me(Me.tabletblMeas.TambientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTcoolantNull() As Boolean
            Return Me.IsNull(Me.tabletblMeas.TcoolantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTcoolantNull()
            Me(Me.tabletblMeas.TcoolantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMeasOrderNull() As Boolean
            Return Me.IsNull(Me.tabletblMeas.MeasOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMeasOrderNull()
            Me(Me.tabletblMeas.MeasOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblCondRows() As tblCondRow()
            If (Me.Table.ChildRelations("FK_tblCond_tblMeas_0") Is Nothing) Then
                Return New tblCondRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblCond_tblMeas_0")),tblCondRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblMeasDetRows() As tblMeasDetRow()
            If (Me.Table.ChildRelations("FK_tblMeasDet_tblMeas_0") Is Nothing) Then
                Return New tblMeasDetRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblMeasDet_tblMeas_0")),tblMeasDetRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblMeasDetRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblMeasDet As tblMeasDetDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblMeasDet = CType(Me.Table,tblMeasDetDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tabletblMeasDet.IDColumn),Long)
            End Get
            Set
                Me(Me.tabletblMeasDet.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IDMeas() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet.IDMeasColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDMeas' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet.IDMeasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MeasOrd() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet.MeasOrdColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MeasOrd' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet.MeasOrdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _UiL1() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._UiL1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_UiL1' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._UiL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _IiL1() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._IiL1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_IiL1' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._IiL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _PiL1() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._PiL1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_PiL1' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._PiL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _FreqUiL1() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._FreqUiL1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_FreqUiL1' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._FreqUiL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _PFiL1() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._PFiL1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_PFiL1' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._PFiL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _UiL2() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._UiL2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_UiL2' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._UiL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _IiL2() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._IiL2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_IiL2' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._IiL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _PiL2() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._PiL2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_PiL2' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._PiL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _FreqUiL2() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._FreqUiL2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_FreqUiL2' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._FreqUiL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _PFiL2() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._PFiL2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_PFiL2' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._PFiL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _UiL3() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._UiL3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_UiL3' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._UiL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _IiL3() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._IiL3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_IiL3' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._IiL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _PiL3() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._PiL3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_PiL3' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._PiL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _FreqUiL3() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._FreqUiL3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_FreqUiL3' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._FreqUiL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _PFiL3() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._PFiL3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_PFiL3' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._PFiL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Pi() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._PiColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_Pi' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._PiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Pfi() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._PfiColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_Pfi' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._PfiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property __ViSet_() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet.__ViSet_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)&"' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet.__ViSet_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _IbatSet() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._IbatSetColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_IbatSet' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._IbatSetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Ibat() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._IbatColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_Ibat' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._IbatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Vbat() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._VbatColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_Vbat' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._VbatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Pbat() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._PbatColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_Pbat' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._PbatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property __Pd_() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet.__Pd_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_Pd"&Global.Microsoft.VisualBasic.ChrW(10)&"' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet.__Pd_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _Eta() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._EtaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_Eta' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._EtaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _nHarmOrd() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._nHarmOrdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_nHarmOrd' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._nHarmOrdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _thdTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._thdTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_thdTot' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._thdTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _nHarmI() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._nHarmIColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_nHarmI' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._nHarmIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _nHarmLim() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDet._nHarmLimColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_nHarmLim' in table 'tblMeasDet' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDet._nHarmLimColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblMeasRow() As tblMeasRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblMeasDet_tblMeas_0")),tblMeasRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblMeasDet_tblMeas_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIDMeasNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet.IDMeasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIDMeasNull()
            Me(Me.tabletblMeasDet.IDMeasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMeasOrdNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet.MeasOrdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMeasOrdNull()
            Me(Me.tabletblMeasDet.MeasOrdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_UiL1Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._UiL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_UiL1Null()
            Me(Me.tabletblMeasDet._UiL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_IiL1Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._IiL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_IiL1Null()
            Me(Me.tabletblMeasDet._IiL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_PiL1Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._PiL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_PiL1Null()
            Me(Me.tabletblMeasDet._PiL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_FreqUiL1Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._FreqUiL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_FreqUiL1Null()
            Me(Me.tabletblMeasDet._FreqUiL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_PFiL1Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._PFiL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_PFiL1Null()
            Me(Me.tabletblMeasDet._PFiL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_UiL2Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._UiL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_UiL2Null()
            Me(Me.tabletblMeasDet._UiL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_IiL2Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._IiL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_IiL2Null()
            Me(Me.tabletblMeasDet._IiL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_PiL2Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._PiL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_PiL2Null()
            Me(Me.tabletblMeasDet._PiL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_FreqUiL2Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._FreqUiL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_FreqUiL2Null()
            Me(Me.tabletblMeasDet._FreqUiL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_PFiL2Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._PFiL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_PFiL2Null()
            Me(Me.tabletblMeasDet._PFiL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_UiL3Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._UiL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_UiL3Null()
            Me(Me.tabletblMeasDet._UiL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_IiL3Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._IiL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_IiL3Null()
            Me(Me.tabletblMeasDet._IiL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_PiL3Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._PiL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_PiL3Null()
            Me(Me.tabletblMeasDet._PiL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_FreqUiL3Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._FreqUiL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_FreqUiL3Null()
            Me(Me.tabletblMeasDet._FreqUiL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_PFiL3Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._PFiL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_PFiL3Null()
            Me(Me.tabletblMeasDet._PFiL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_PiNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._PiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_PiNull()
            Me(Me.tabletblMeasDet._PiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_PfiNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._PfiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_PfiNull()
            Me(Me.tabletblMeasDet._PfiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is__ViSet_Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet.__ViSet_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set__ViSet_Null()
            Me(Me.tabletblMeasDet.__ViSet_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_IbatSetNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._IbatSetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_IbatSetNull()
            Me(Me.tabletblMeasDet._IbatSetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_IbatNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._IbatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_IbatNull()
            Me(Me.tabletblMeasDet._IbatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_VbatNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._VbatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_VbatNull()
            Me(Me.tabletblMeasDet._VbatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_PbatNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._PbatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_PbatNull()
            Me(Me.tabletblMeasDet._PbatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is__Pd_Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet.__Pd_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set__Pd_Null()
            Me(Me.tabletblMeasDet.__Pd_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_EtaNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._EtaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_EtaNull()
            Me(Me.tabletblMeasDet._EtaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_nHarmOrdNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._nHarmOrdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_nHarmOrdNull()
            Me(Me.tabletblMeasDet._nHarmOrdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_thdTotNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._thdTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_thdTotNull()
            Me(Me.tabletblMeasDet._thdTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_nHarmINull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._nHarmIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_nHarmINull()
            Me(Me.tabletblMeasDet._nHarmIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_nHarmLimNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDet._nHarmLimColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_nHarmLimNull()
            Me(Me.tabletblMeasDet._nHarmLimColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblMeasDetRbRows() As tblMeasDetRbRow()
            If (Me.Table.ChildRelations("FK_tblMeasDetRb_tblMeasDet_0") Is Nothing) Then
                Return New tblMeasDetRbRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblMeasDetRb_tblMeasDet_0")),tblMeasDetRbRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblMeasDetRbRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblMeasDetRb As tblMeasDetRbDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblMeasDetRb = CType(Me.Table,tblMeasDetRbDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tabletblMeasDetRb.IDColumn),Long)
            End Get
            Set
                Me(Me.tabletblMeasDetRb.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IdMeasDet() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb.IdMeasDetColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdMeasDet' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb.IdMeasDetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbVoltL1() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbVoltL1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbVoltL1' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbVoltL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbVolt2() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbVolt2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbVolt2' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbVolt2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbVoltL3() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbVoltL3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbVoltL3' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbVoltL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbCurrL1() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbCurrL1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbCurrL1' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbCurrL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbCurrL2() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbCurrL2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbCurrL2' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbCurrL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbCurrL3() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbCurrL3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbCurrL3' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbCurrL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbIbat() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbIbatColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbIbat' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbIbatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbVbat() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbVbatColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbVbat' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbVbatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbIbatMaxAv() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbIbatMaxAvColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbIbatMaxAv' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbIbatMaxAvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbFreq() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbFreqColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbFreq' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbFreqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbLVbat() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbLVbatColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbLVbat' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbLVbatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbTempPerc() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbTempPercColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbTempPerc' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbTempPercColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbSigTamb() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbSigTambColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbSigTamb' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbSigTambColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbSigTchas() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbSigTchasColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbSigTchas' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbSigTchasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbSigTexCon() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbSigTexConColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbSigTexCon' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbSigTexConColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbExtSenTyp() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbExtSenTypColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbExtSenTyp' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbExtSenTypColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _rbErrStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblMeasDetRb._rbErrStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '_rbErrStatus' in table 'tblMeasDetRb' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMeasDetRb._rbErrStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblMeasDetRow() As tblMeasDetRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblMeasDetRb_tblMeasDet_0")),tblMeasDetRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblMeasDetRb_tblMeasDet_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIdMeasDetNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb.IdMeasDetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIdMeasDetNull()
            Me(Me.tabletblMeasDetRb.IdMeasDetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbVoltL1Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbVoltL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbVoltL1Null()
            Me(Me.tabletblMeasDetRb._rbVoltL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbVolt2Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbVolt2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbVolt2Null()
            Me(Me.tabletblMeasDetRb._rbVolt2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbVoltL3Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbVoltL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbVoltL3Null()
            Me(Me.tabletblMeasDetRb._rbVoltL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbCurrL1Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbCurrL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbCurrL1Null()
            Me(Me.tabletblMeasDetRb._rbCurrL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbCurrL2Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbCurrL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbCurrL2Null()
            Me(Me.tabletblMeasDetRb._rbCurrL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbCurrL3Null() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbCurrL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbCurrL3Null()
            Me(Me.tabletblMeasDetRb._rbCurrL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbIbatNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbIbatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbIbatNull()
            Me(Me.tabletblMeasDetRb._rbIbatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbVbatNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbVbatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbVbatNull()
            Me(Me.tabletblMeasDetRb._rbVbatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbIbatMaxAvNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbIbatMaxAvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbIbatMaxAvNull()
            Me(Me.tabletblMeasDetRb._rbIbatMaxAvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbFreqNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbFreqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbFreqNull()
            Me(Me.tabletblMeasDetRb._rbFreqColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbLVbatNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbLVbatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbLVbatNull()
            Me(Me.tabletblMeasDetRb._rbLVbatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbTempPercNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbTempPercColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbTempPercNull()
            Me(Me.tabletblMeasDetRb._rbTempPercColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbSigTambNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbSigTambColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbSigTambNull()
            Me(Me.tabletblMeasDetRb._rbSigTambColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbSigTchasNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbSigTchasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbSigTchasNull()
            Me(Me.tabletblMeasDetRb._rbSigTchasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbSigTexConNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbSigTexConColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbSigTexConNull()
            Me(Me.tabletblMeasDetRb._rbSigTexConColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbExtSenTypNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbExtSenTypColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbExtSenTypNull()
            Me(Me.tabletblMeasDetRb._rbExtSenTypColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_rbErrStatusNull() As Boolean
            Return Me.IsNull(Me.tabletblMeasDetRb._rbErrStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_rbErrStatusNull()
            Me(Me.tabletblMeasDetRb._rbErrStatusColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class sqlite_sequenceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sqlite_sequenceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As sqlite_sequenceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As sqlite_sequenceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblAVTTestRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblAVTTestRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblAVTTestRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblAVTTestRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblCondRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblCondRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblCondRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblCondRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblMeasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblMeasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblMeasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblMeasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblMeasDetRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblMeasDetRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblMeasDetRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblMeasDetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblMeasDetRbRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblMeasDetRbRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblMeasDetRbRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblMeasDetRbRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSet1TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sqlite_sequenceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sqlite_sequence"
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("seq", "seq")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""sqlite_sequence"" (""name"", ""seq"") VALUES (:name, :seq)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "seq"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "seq"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.CreateTestData.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT name, seq FROM ""main"".""sqlite_sequence"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.sqlite_sequenceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.sqlite_sequenceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.sqlite_sequenceDataTable = New DataSet1.sqlite_sequenceDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.sqlite_sequenceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "sqlite_sequence")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal name As String, ByVal seq As Global.System.Nullable(Of Long)) As Integer
            If (name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(name,String)
            End If
            If (seq.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(seq.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblAVTTestTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblAVTTest"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("CR", "CR")
            tableMapping.ColumnMappings.Add("UUTModel", "UUTModel")
            tableMapping.ColumnMappings.Add("SerialNo", "SerialNo")
            tableMapping.ColumnMappings.Add("HWRevision", "HWRevision")
            tableMapping.ColumnMappings.Add("ComponentID", "ComponentID")
            tableMapping.ColumnMappings.Add("SWID", "SWID")
            tableMapping.ColumnMappings.Add("TestStart", "TestStart")
            tableMapping.ColumnMappings.Add("TestFinish", "TestFinish")
            tableMapping.ColumnMappings.Add("TestEngName", "TestEngName")
            tableMapping.ColumnMappings.Add("TestStation", "TestStation")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""tblAVTTest"" WHERE ((""ID"" = :Original_ID) AND ((:IsNull_CR = 1"& _ 
                " AND ""CR"" IS NULL) OR (""CR"" = :Original_CR)) AND ((:IsNull_UUTModel = 1 AND ""UUT"& _ 
                "Model"" IS NULL) OR (""UUTModel"" = :Original_UUTModel)) AND ((:IsNull_SerialNo = 1"& _ 
                " AND ""SerialNo"" IS NULL) OR (""SerialNo"" = :Original_SerialNo)) AND ((:IsNull_HWR"& _ 
                "evision = 1 AND ""HWRevision"" IS NULL) OR (""HWRevision"" = :Original_HWRevision)) "& _ 
                "AND ((:IsNull_ComponentID = 1 AND ""ComponentID"" IS NULL) OR (""ComponentID"" = :Or"& _ 
                "iginal_ComponentID)) AND ((:IsNull_SWID = 1 AND ""SWID"" IS NULL) OR (""SWID"" = :Or"& _ 
                "iginal_SWID)) AND ((:IsNull_TestStart = 1 AND ""TestStart"" IS NULL) OR (""TestStar"& _ 
                "t"" = :Original_TestStart)) AND ((:IsNull_TestFinish = 1 AND ""TestFinish"" IS NULL"& _ 
                ") OR (""TestFinish"" = :Original_TestFinish)) AND ((:IsNull_TestEngName = 1 AND ""T"& _ 
                "estEngName"" IS NULL) OR (""TestEngName"" = :Original_TestEngName)) AND ((:IsNull_T"& _ 
                "estStation = 1 AND ""TestStation"" IS NULL) OR (""TestStation"" = :Original_TestStat"& _ 
                "ion)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_CR"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "CR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_CR"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "CR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_UUTModel"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "UUTModel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_UUTModel"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "UUTModel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_SerialNo"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "SerialNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_SerialNo"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "SerialNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_HWRevision"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "HWRevision"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_HWRevision"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "HWRevision"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ComponentID"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ComponentID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ComponentID"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ComponentID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_SWID"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "SWID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_SWID"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "SWID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_TestStart"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "TestStart"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_TestStart"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "TestStart"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_TestFinish"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "TestFinish"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_TestFinish"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "TestFinish"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_TestEngName"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "TestEngName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_TestEngName"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "TestEngName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_TestStation"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "TestStation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_TestStation"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "TestStation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""tblAVTTest"" (""ID"", ""CR"", ""UUTModel"", ""SerialNo"", ""HWRevision"""& _ 
                ", ""ComponentID"", ""SWID"", ""TestStart"", ""TestFinish"", ""TestEngName"", ""TestStation"""& _ 
                ") VALUES (:ID, :CR, :UUTModel, :SerialNo, :HWRevision, :ComponentID, :SWID, :Tes"& _ 
                "tStart, :TestFinish, :TestEngName, :TestStation)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "CR"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "CR"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "UUTModel"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "UUTModel"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "SerialNo"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "SerialNo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "HWRevision"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "HWRevision"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ComponentID"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ComponentID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "SWID"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "SWID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "TestStart"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "TestStart"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "TestFinish"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "TestFinish"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "TestEngName"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "TestEngName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "TestStation"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "TestStation"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""tblAVTTest"" SET ""ID"" = :ID, ""CR"" = :CR, ""UUTModel"" = :UUTModel, ""S"& _ 
                "erialNo"" = :SerialNo, ""HWRevision"" = :HWRevision, ""ComponentID"" = :ComponentID, "& _ 
                """SWID"" = :SWID, ""TestStart"" = :TestStart, ""TestFinish"" = :TestFinish, ""TestEngNa"& _ 
                "me"" = :TestEngName, ""TestStation"" = :TestStation WHERE ((""ID"" = :Original_ID) AN"& _ 
                "D ((:IsNull_CR = 1 AND ""CR"" IS NULL) OR (""CR"" = :Original_CR)) AND ((:IsNull_UUT"& _ 
                "Model = 1 AND ""UUTModel"" IS NULL) OR (""UUTModel"" = :Original_UUTModel)) AND ((:I"& _ 
                "sNull_SerialNo = 1 AND ""SerialNo"" IS NULL) OR (""SerialNo"" = :Original_SerialNo))"& _ 
                " AND ((:IsNull_HWRevision = 1 AND ""HWRevision"" IS NULL) OR (""HWRevision"" = :Orig"& _ 
                "inal_HWRevision)) AND ((:IsNull_ComponentID = 1 AND ""ComponentID"" IS NULL) OR ("""& _ 
                "ComponentID"" = :Original_ComponentID)) AND ((:IsNull_SWID = 1 AND ""SWID"" IS NULL"& _ 
                ") OR (""SWID"" = :Original_SWID)) AND ((:IsNull_TestStart = 1 AND ""TestStart"" IS N"& _ 
                "ULL) OR (""TestStart"" = :Original_TestStart)) AND ((:IsNull_TestFinish = 1 AND ""T"& _ 
                "estFinish"" IS NULL) OR (""TestFinish"" = :Original_TestFinish)) AND ((:IsNull_Test"& _ 
                "EngName = 1 AND ""TestEngName"" IS NULL) OR (""TestEngName"" = :Original_TestEngName"& _ 
                ")) AND ((:IsNull_TestStation = 1 AND ""TestStation"" IS NULL) OR (""TestStation"" = "& _ 
                ":Original_TestStation)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "CR"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "CR"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "UUTModel"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "UUTModel"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "SerialNo"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "SerialNo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "HWRevision"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "HWRevision"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ComponentID"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ComponentID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "SWID"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "SWID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "TestStart"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "TestStart"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "TestFinish"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "TestFinish"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "TestEngName"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "TestEngName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "TestStation"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "TestStation"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_CR"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "CR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_CR"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "CR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_UUTModel"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "UUTModel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_UUTModel"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "UUTModel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_SerialNo"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "SerialNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_SerialNo"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "SerialNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_HWRevision"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "HWRevision"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_HWRevision"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "HWRevision"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ComponentID"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ComponentID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ComponentID"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ComponentID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_SWID"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "SWID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_SWID"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "SWID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_TestStart"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "TestStart"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_TestStart"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "TestStart"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_TestFinish"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "TestFinish"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_TestFinish"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "TestFinish"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_TestEngName"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "TestEngName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_TestEngName"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "TestEngName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_TestStation"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "TestStation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_TestStation"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "TestStation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.CreateTestData.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, CR, UUTModel, SerialNo, HWRevision, ComponentID, SWID, TestStart, Test"& _ 
                "Finish, TestEngName, TestStation FROM ""main"".tblAVTTest"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tblAVTTestDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.tblAVTTestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.tblAVTTestDataTable = New DataSet1.tblAVTTestDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.tblAVTTestDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "tblAVTTest")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Long, ByVal Original_CR As String, ByVal Original_UUTModel As String, ByVal Original_SerialNo As String, ByVal Original_HWRevision As String, ByVal Original_ComponentID As String, ByVal Original_SWID As String, ByVal Original_TestStart As Global.System.Nullable(Of Date), ByVal Original_TestFinish As Global.System.Nullable(Of Date), ByVal Original_TestEngName As String, ByVal Original_TestStation As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Long)
            If (Original_CR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CR,String)
            End If
            If (Original_UUTModel Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_UUTModel,String)
            End If
            If (Original_SerialNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SerialNo,String)
            End If
            If (Original_HWRevision Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_HWRevision,String)
            End If
            If (Original_ComponentID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ComponentID,String)
            End If
            If (Original_SWID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_SWID,String)
            End If
            If (Original_TestStart.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_TestStart.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_TestFinish.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_TestFinish.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_TestEngName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_TestEngName,String)
            End If
            If (Original_TestStation Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_TestStation,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Long, ByVal CR As String, ByVal UUTModel As String, ByVal SerialNo As String, ByVal HWRevision As String, ByVal ComponentID As String, ByVal SWID As String, ByVal TestStart As Global.System.Nullable(Of Date), ByVal TestFinish As Global.System.Nullable(Of Date), ByVal TestEngName As String, ByVal TestStation As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Long)
            If (CR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CR,String)
            End If
            If (UUTModel Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(UUTModel,String)
            End If
            If (SerialNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SerialNo,String)
            End If
            If (HWRevision Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(HWRevision,String)
            End If
            If (ComponentID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ComponentID,String)
            End If
            If (SWID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SWID,String)
            End If
            If (TestStart.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TestStart.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (TestFinish.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(TestFinish.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (TestEngName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(TestEngName,String)
            End If
            If (TestStation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(TestStation,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID As Long,  _
                    ByVal CR As String,  _
                    ByVal UUTModel As String,  _
                    ByVal SerialNo As String,  _
                    ByVal HWRevision As String,  _
                    ByVal ComponentID As String,  _
                    ByVal SWID As String,  _
                    ByVal TestStart As Global.System.Nullable(Of Date),  _
                    ByVal TestFinish As Global.System.Nullable(Of Date),  _
                    ByVal TestEngName As String,  _
                    ByVal TestStation As String,  _
                    ByVal Original_ID As Long,  _
                    ByVal Original_CR As String,  _
                    ByVal Original_UUTModel As String,  _
                    ByVal Original_SerialNo As String,  _
                    ByVal Original_HWRevision As String,  _
                    ByVal Original_ComponentID As String,  _
                    ByVal Original_SWID As String,  _
                    ByVal Original_TestStart As Global.System.Nullable(Of Date),  _
                    ByVal Original_TestFinish As Global.System.Nullable(Of Date),  _
                    ByVal Original_TestEngName As String,  _
                    ByVal Original_TestStation As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID,Long)
            If (CR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CR,String)
            End If
            If (UUTModel Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(UUTModel,String)
            End If
            If (SerialNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SerialNo,String)
            End If
            If (HWRevision Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(HWRevision,String)
            End If
            If (ComponentID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ComponentID,String)
            End If
            If (SWID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SWID,String)
            End If
            If (TestStart.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TestStart.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (TestFinish.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(TestFinish.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (TestEngName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(TestEngName,String)
            End If
            If (TestStation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(TestStation,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ID,Long)
            If (Original_CR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_CR,String)
            End If
            If (Original_UUTModel Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_UUTModel,String)
            End If
            If (Original_SerialNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_SerialNo,String)
            End If
            If (Original_HWRevision Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_HWRevision,String)
            End If
            If (Original_ComponentID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_ComponentID,String)
            End If
            If (Original_SWID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_SWID,String)
            End If
            If (Original_TestStart.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_TestStart.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_TestFinish.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_TestFinish.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_TestEngName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_TestEngName,String)
            End If
            If (Original_TestStation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_TestStation,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CR As String,  _
                    ByVal UUTModel As String,  _
                    ByVal SerialNo As String,  _
                    ByVal HWRevision As String,  _
                    ByVal ComponentID As String,  _
                    ByVal SWID As String,  _
                    ByVal TestStart As Global.System.Nullable(Of Date),  _
                    ByVal TestFinish As Global.System.Nullable(Of Date),  _
                    ByVal TestEngName As String,  _
                    ByVal TestStation As String,  _
                    ByVal Original_ID As Long,  _
                    ByVal Original_CR As String,  _
                    ByVal Original_UUTModel As String,  _
                    ByVal Original_SerialNo As String,  _
                    ByVal Original_HWRevision As String,  _
                    ByVal Original_ComponentID As String,  _
                    ByVal Original_SWID As String,  _
                    ByVal Original_TestStart As Global.System.Nullable(Of Date),  _
                    ByVal Original_TestFinish As Global.System.Nullable(Of Date),  _
                    ByVal Original_TestEngName As String,  _
                    ByVal Original_TestStation As String) As Integer
            Return Me.Update(Original_ID, CR, UUTModel, SerialNo, HWRevision, ComponentID, SWID, TestStart, TestFinish, TestEngName, TestStation, Original_ID, Original_CR, Original_UUTModel, Original_SerialNo, Original_HWRevision, Original_ComponentID, Original_SWID, Original_TestStart, Original_TestFinish, Original_TestEngName, Original_TestStation)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblCondTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblCond"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("idMeas", "idMeas")
            tableMapping.ColumnMappings.Add("CondTxt", "CondTxt")
            tableMapping.ColumnMappings.Add("CondOrder", "CondOrder")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""tblCond"" WHERE ((""ID"" = :Original_ID) AND ((:IsNull_idMeas = "& _ 
                "1 AND ""idMeas"" IS NULL) OR (""idMeas"" = :Original_idMeas)) AND ((:IsNull_CondTxt "& _ 
                "= 1 AND ""CondTxt"" IS NULL) OR (""CondTxt"" = :Original_CondTxt)) AND ((:IsNull_Con"& _ 
                "dOrder = 1 AND ""CondOrder"" IS NULL) OR (""CondOrder"" = :Original_CondOrder)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_idMeas"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "idMeas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_idMeas"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "idMeas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_CondTxt"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "CondTxt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_CondTxt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "CondTxt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_CondOrder"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "CondOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_CondOrder"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "CondOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""tblCond"" (""ID"", ""idMeas"", ""CondTxt"", ""CondOrder"") VALUES (:ID"& _ 
                ", :idMeas, :CondTxt, :CondOrder)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "idMeas"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "idMeas"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "CondTxt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "CondTxt"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "CondOrder"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "CondOrder"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""tblCond"" SET ""ID"" = :ID, ""idMeas"" = :idMeas, ""CondTxt"" = :CondTxt,"& _ 
                " ""CondOrder"" = :CondOrder WHERE ((""ID"" = :Original_ID) AND ((:IsNull_idMeas = 1 "& _ 
                "AND ""idMeas"" IS NULL) OR (""idMeas"" = :Original_idMeas)) AND ((:IsNull_CondTxt = "& _ 
                "1 AND ""CondTxt"" IS NULL) OR (""CondTxt"" = :Original_CondTxt)) AND ((:IsNull_CondO"& _ 
                "rder = 1 AND ""CondOrder"" IS NULL) OR (""CondOrder"" = :Original_CondOrder)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "idMeas"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "idMeas"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "CondTxt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "CondTxt"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "CondOrder"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "CondOrder"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_idMeas"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "idMeas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_idMeas"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "idMeas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_CondTxt"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "CondTxt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_CondTxt"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "CondTxt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_CondOrder"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "CondOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_CondOrder"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "CondOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.CreateTestData.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, idMeas, CondTxt, CondOrder FROM ""main"".tblCond"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tblCondDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.tblCondDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.tblCondDataTable = New DataSet1.tblCondDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.tblCondDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "tblCond")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Long, ByVal Original_idMeas As Global.System.Nullable(Of Long), ByVal Original_CondTxt As String, ByVal Original_CondOrder As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Long)
            If (Original_idMeas.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_idMeas.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_CondTxt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CondTxt,String)
            End If
            If (Original_CondOrder.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CondOrder.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Long, ByVal idMeas As Global.System.Nullable(Of Long), ByVal CondTxt As String, ByVal CondOrder As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Long)
            If (idMeas.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(idMeas.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CondTxt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CondTxt,String)
            End If
            If (CondOrder.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CondOrder.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID As Long, ByVal idMeas As Global.System.Nullable(Of Long), ByVal CondTxt As String, ByVal CondOrder As Global.System.Nullable(Of Integer), ByVal Original_ID As Long, ByVal Original_idMeas As Global.System.Nullable(Of Long), ByVal Original_CondTxt As String, ByVal Original_CondOrder As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID,Long)
            If (idMeas.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(idMeas.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CondTxt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CondTxt,String)
            End If
            If (CondOrder.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CondOrder.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ID,Long)
            If (Original_idMeas.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_idMeas.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_CondTxt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CondTxt,String)
            End If
            If (Original_CondOrder.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CondOrder.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal idMeas As Global.System.Nullable(Of Long), ByVal CondTxt As String, ByVal CondOrder As Global.System.Nullable(Of Integer), ByVal Original_ID As Long, ByVal Original_idMeas As Global.System.Nullable(Of Long), ByVal Original_CondTxt As String, ByVal Original_CondOrder As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_ID, idMeas, CondTxt, CondOrder, Original_ID, Original_idMeas, Original_CondTxt, Original_CondOrder)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblMeasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblMeas"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("IDAVT", "IDAVT")
            tableMapping.ColumnMappings.Add("IDMeas", "IDMeas")
            tableMapping.ColumnMappings.Add("Tambient", "Tambient")
            tableMapping.ColumnMappings.Add("Tcoolant", "Tcoolant")
            tableMapping.ColumnMappings.Add("MeasOrder", "MeasOrder")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""tblMeas"" WHERE ((""ID"" = :Original_ID) AND ((:IsNull_IDAVT = 1"& _ 
                " AND ""IDAVT"" IS NULL) OR (""IDAVT"" = :Original_IDAVT)) AND ((:IsNull_IDMeas = 1 A"& _ 
                "ND ""IDMeas"" IS NULL) OR (""IDMeas"" = :Original_IDMeas)) AND ((:IsNull_Tambient = "& _ 
                "1 AND ""Tambient"" IS NULL) OR (""Tambient"" = :Original_Tambient)) AND ((:IsNull_Tc"& _ 
                "oolant = 1 AND ""Tcoolant"" IS NULL) OR (""Tcoolant"" = :Original_Tcoolant)) AND ((:"& _ 
                "IsNull_MeasOrder = 1 AND ""MeasOrder"" IS NULL) OR (""MeasOrder"" = :Original_MeasOr"& _ 
                "der)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_IDAVT"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "IDAVT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_IDAVT"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "IDAVT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_IDMeas"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "IDMeas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_IDMeas"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "IDMeas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Tambient"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Tambient"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Tambient"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Tambient"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Tcoolant"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Tcoolant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Tcoolant"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Tcoolant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_MeasOrder"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "MeasOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_MeasOrder"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "MeasOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""tblMeas"" (""ID"", ""IDAVT"", ""IDMeas"", ""Tambient"", ""Tcoolant"", ""M"& _ 
                "easOrder"") VALUES (:ID, :IDAVT, :IDMeas, :Tambient, :Tcoolant, :MeasOrder)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IDAVT"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "IDAVT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IDMeas"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "IDMeas"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Tambient"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Tambient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Tcoolant"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Tcoolant"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "MeasOrder"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "MeasOrder"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""tblMeas"" SET ""ID"" = :ID, ""IDAVT"" = :IDAVT, ""IDMeas"" = :IDMeas, ""Ta"& _ 
                "mbient"" = :Tambient, ""Tcoolant"" = :Tcoolant, ""MeasOrder"" = :MeasOrder WHERE ((""I"& _ 
                "D"" = :Original_ID) AND ((:IsNull_IDAVT = 1 AND ""IDAVT"" IS NULL) OR (""IDAVT"" = :O"& _ 
                "riginal_IDAVT)) AND ((:IsNull_IDMeas = 1 AND ""IDMeas"" IS NULL) OR (""IDMeas"" = :O"& _ 
                "riginal_IDMeas)) AND ((:IsNull_Tambient = 1 AND ""Tambient"" IS NULL) OR (""Tambien"& _ 
                "t"" = :Original_Tambient)) AND ((:IsNull_Tcoolant = 1 AND ""Tcoolant"" IS NULL) OR "& _ 
                "(""Tcoolant"" = :Original_Tcoolant)) AND ((:IsNull_MeasOrder = 1 AND ""MeasOrder"" I"& _ 
                "S NULL) OR (""MeasOrder"" = :Original_MeasOrder)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IDAVT"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "IDAVT"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IDMeas"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "IDMeas"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Tambient"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Tambient"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Tcoolant"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Tcoolant"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "MeasOrder"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "MeasOrder"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_IDAVT"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "IDAVT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_IDAVT"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "IDAVT"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_IDMeas"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "IDMeas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_IDMeas"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "IDMeas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Tambient"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Tambient"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Tambient"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Tambient"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Tcoolant"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Tcoolant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Tcoolant"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Tcoolant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_MeasOrder"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "MeasOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_MeasOrder"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "MeasOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.CreateTestData.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, IDAVT, IDMeas, Tambient, Tcoolant, MeasOrder FROM ""main"".tblMeas"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tblMeasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.tblMeasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.tblMeasDataTable = New DataSet1.tblMeasDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.tblMeasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "tblMeas")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Long, ByVal Original_IDAVT As Global.System.Nullable(Of Long), ByVal Original_IDMeas As String, ByVal Original_Tambient As Global.System.Nullable(Of Double), ByVal Original_Tcoolant As Global.System.Nullable(Of Double), ByVal Original_MeasOrder As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Long)
            If (Original_IDAVT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IDAVT.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_IDMeas Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_IDMeas,String)
            End If
            If (Original_Tambient.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Tambient.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Tcoolant.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Tcoolant.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_MeasOrder.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_MeasOrder.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Long, ByVal IDAVT As Global.System.Nullable(Of Long), ByVal IDMeas As String, ByVal Tambient As Global.System.Nullable(Of Double), ByVal Tcoolant As Global.System.Nullable(Of Double), ByVal MeasOrder As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Long)
            If (IDAVT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IDAVT.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IDMeas Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IDMeas,String)
            End If
            If (Tambient.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Tambient.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Tcoolant.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Tcoolant.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MeasOrder.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MeasOrder.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID As Long, ByVal IDAVT As Global.System.Nullable(Of Long), ByVal IDMeas As String, ByVal Tambient As Global.System.Nullable(Of Double), ByVal Tcoolant As Global.System.Nullable(Of Double), ByVal MeasOrder As Global.System.Nullable(Of Long), ByVal Original_ID As Long, ByVal Original_IDAVT As Global.System.Nullable(Of Long), ByVal Original_IDMeas As String, ByVal Original_Tambient As Global.System.Nullable(Of Double), ByVal Original_Tcoolant As Global.System.Nullable(Of Double), ByVal Original_MeasOrder As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID,Long)
            If (IDAVT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IDAVT.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IDMeas Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IDMeas,String)
            End If
            If (Tambient.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Tambient.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Tcoolant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Tcoolant.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MeasOrder.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MeasOrder.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ID,Long)
            If (Original_IDAVT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_IDAVT.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_IDMeas Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_IDMeas,String)
            End If
            If (Original_Tambient.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Tambient.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Tcoolant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Tcoolant.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_MeasOrder.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_MeasOrder.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDAVT As Global.System.Nullable(Of Long), ByVal IDMeas As String, ByVal Tambient As Global.System.Nullable(Of Double), ByVal Tcoolant As Global.System.Nullable(Of Double), ByVal MeasOrder As Global.System.Nullable(Of Long), ByVal Original_ID As Long, ByVal Original_IDAVT As Global.System.Nullable(Of Long), ByVal Original_IDMeas As String, ByVal Original_Tambient As Global.System.Nullable(Of Double), ByVal Original_Tcoolant As Global.System.Nullable(Of Double), ByVal Original_MeasOrder As Global.System.Nullable(Of Long)) As Integer
            Return Me.Update(Original_ID, IDAVT, IDMeas, Tambient, Tcoolant, MeasOrder, Original_ID, Original_IDAVT, Original_IDMeas, Original_Tambient, Original_Tcoolant, Original_MeasOrder)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblMeasDetTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblMeasDet"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("IDMeas", "IDMeas")
            tableMapping.ColumnMappings.Add("MeasOrd", "MeasOrd")
            tableMapping.ColumnMappings.Add("_UiL1", "_UiL1")
            tableMapping.ColumnMappings.Add("_IiL1", "_IiL1")
            tableMapping.ColumnMappings.Add("_PiL1", "_PiL1")
            tableMapping.ColumnMappings.Add("_FreqUiL1", "_FreqUiL1")
            tableMapping.ColumnMappings.Add("_PFiL1", "_PFiL1")
            tableMapping.ColumnMappings.Add("_UiL2", "_UiL2")
            tableMapping.ColumnMappings.Add("_IiL2", "_IiL2")
            tableMapping.ColumnMappings.Add("_PiL2", "_PiL2")
            tableMapping.ColumnMappings.Add("_FreqUiL2", "_FreqUiL2")
            tableMapping.ColumnMappings.Add("_PFiL2", "_PFiL2")
            tableMapping.ColumnMappings.Add("_UiL3", "_UiL3")
            tableMapping.ColumnMappings.Add("_IiL3", "_IiL3")
            tableMapping.ColumnMappings.Add("_PiL3", "_PiL3")
            tableMapping.ColumnMappings.Add("_FreqUiL3", "_FreqUiL3")
            tableMapping.ColumnMappings.Add("_PFiL3", "_PFiL3")
            tableMapping.ColumnMappings.Add("_Pi", "_Pi")
            tableMapping.ColumnMappings.Add("_Pfi", "_Pfi")
            tableMapping.ColumnMappings.Add("_ViSet"&Global.Microsoft.VisualBasic.ChrW(10), "_ViSet"&Global.Microsoft.VisualBasic.ChrW(10))
            tableMapping.ColumnMappings.Add("_IbatSet", "_IbatSet")
            tableMapping.ColumnMappings.Add("_Ibat", "_Ibat")
            tableMapping.ColumnMappings.Add("_Vbat", "_Vbat")
            tableMapping.ColumnMappings.Add("_Pbat", "_Pbat")
            tableMapping.ColumnMappings.Add("_Pd"&Global.Microsoft.VisualBasic.ChrW(10), "_Pd"&Global.Microsoft.VisualBasic.ChrW(10))
            tableMapping.ColumnMappings.Add("_Eta", "_Eta")
            tableMapping.ColumnMappings.Add("_nHarmOrd", "_nHarmOrd")
            tableMapping.ColumnMappings.Add("_thdTot", "_thdTot")
            tableMapping.ColumnMappings.Add("_nHarmI", "_nHarmI")
            tableMapping.ColumnMappings.Add("_nHarmLim", "_nHarmLim")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""tblMeasDet"" WHERE ((""ID"" = :Original_ID) AND ((:IsNull_IDMeas"& _ 
                " = 1 AND ""IDMeas"" IS NULL) OR (""IDMeas"" = :Original_IDMeas)) AND ((:IsNull_MeasO"& _ 
                "rd = 1 AND ""MeasOrd"" IS NULL) OR (""MeasOrd"" = :Original_MeasOrd)) AND ((:IsNull_"& _ 
                "_UiL1 = 1 AND ""_UiL1"" IS NULL) OR (""_UiL1"" = :Original__UiL1)) AND ((:IsNull__Ii"& _ 
                "L1 = 1 AND ""_IiL1"" IS NULL) OR (""_IiL1"" = :Original__IiL1)) AND ((:IsNull__PiL1 "& _ 
                "= 1 AND ""_PiL1"" IS NULL) OR (""_PiL1"" = :Original__PiL1)) AND ((:IsNull__FreqUiL1"& _ 
                " = 1 AND ""_FreqUiL1"" IS NULL) OR (""_FreqUiL1"" = :Original__FreqUiL1)) AND ((:IsN"& _ 
                "ull__PFiL1 = 1 AND ""_PFiL1"" IS NULL) OR (""_PFiL1"" = :Original__PFiL1)) AND ((:Is"& _ 
                "Null__UiL2 = 1 AND ""_UiL2"" IS NULL) OR (""_UiL2"" = :Original__UiL2)) AND ((:IsNul"& _ 
                "l__IiL2 = 1 AND ""_IiL2"" IS NULL) OR (""_IiL2"" = :Original__IiL2)) AND ((:IsNull__"& _ 
                "PiL2 = 1 AND ""_PiL2"" IS NULL) OR (""_PiL2"" = :Original__PiL2)) AND ((:IsNull__Fre"& _ 
                "qUiL2 = 1 AND ""_FreqUiL2"" IS NULL) OR (""_FreqUiL2"" = :Original__FreqUiL2)) AND ("& _ 
                "(:IsNull__PFiL2 = 1 AND ""_PFiL2"" IS NULL) OR (""_PFiL2"" = :Original__PFiL2)) AND "& _ 
                "((:IsNull__UiL3 = 1 AND ""_UiL3"" IS NULL) OR (""_UiL3"" = :Original__UiL3)) AND ((:"& _ 
                "IsNull__IiL3 = 1 AND ""_IiL3"" IS NULL) OR (""_IiL3"" = :Original__IiL3)) AND ((:IsN"& _ 
                "ull__PiL3 = 1 AND ""_PiL3"" IS NULL) OR (""_PiL3"" = :Original__PiL3)) AND ((:IsNull"& _ 
                "__FreqUiL3 = 1 AND ""_FreqUiL3"" IS NULL) OR (""_FreqUiL3"" = :Original__FreqUiL3)) "& _ 
                "AND ((:IsNull__PFiL3 = 1 AND ""_PFiL3"" IS NULL) OR (""_PFiL3"" = :Original__PFiL3))"& _ 
                " AND ((:IsNull__Pi = 1 AND ""_Pi"" IS NULL) OR (""_Pi"" = :Original__Pi)) AND ((:IsN"& _ 
                "ull__Pfi = 1 AND ""_Pfi"" IS NULL) OR (""_Pfi"" = :Original__Pfi)) AND ((:IsNull__Vi"& _ 
                "Set"&Global.Microsoft.VisualBasic.ChrW(10)&" = 1 AND ""_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)&""" IS NULL) OR (""_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)&""" = :Original__ViSet"&Global.Microsoft.VisualBasic.ChrW(10)&")) AND ((:IsNul"& _ 
                "l__IbatSet = 1 AND ""_IbatSet"" IS NULL) OR (""_IbatSet"" = :Original__IbatSet)) AND"& _ 
                " ((:IsNull__Ibat = 1 AND ""_Ibat"" IS NULL) OR (""_Ibat"" = :Original__Ibat)) AND (("& _ 
                ":IsNull__Vbat = 1 AND ""_Vbat"" IS NULL) OR (""_Vbat"" = :Original__Vbat)) AND ((:Is"& _ 
                "Null__Pbat = 1 AND ""_Pbat"" IS NULL) OR (""_Pbat"" = :Original__Pbat)) AND ((:IsNul"& _ 
                "l__Pd"&Global.Microsoft.VisualBasic.ChrW(10)&" = 1 AND ""_Pd"&Global.Microsoft.VisualBasic.ChrW(10)&""" IS NULL) OR (""_Pd"&Global.Microsoft.VisualBasic.ChrW(10)&""" = :Original__Pd"&Global.Microsoft.VisualBasic.ChrW(10)&")) AND ((:IsNull__Eta "& _ 
                "= 1 AND ""_Eta"" IS NULL) OR (""_Eta"" = :Original__Eta)) AND ((:IsNull__nHarmOrd = "& _ 
                "1 AND ""_nHarmOrd"" IS NULL) OR (""_nHarmOrd"" = :Original__nHarmOrd)) AND ((:IsNull"& _ 
                "__thdTot = 1 AND ""_thdTot"" IS NULL) OR (""_thdTot"" = :Original__thdTot)) AND ((:I"& _ 
                "sNull__nHarmI = 1 AND ""_nHarmI"" IS NULL) OR (""_nHarmI"" = :Original__nHarmI)) AND"& _ 
                " ((:IsNull__nHarmLim = 1 AND ""_nHarmLim"" IS NULL) OR (""_nHarmLim"" = :Original__n"& _ 
                "HarmLim)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_IDMeas"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "IDMeas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_IDMeas"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "IDMeas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_MeasOrd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "MeasOrd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_MeasOrd"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "MeasOrd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__UiL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_UiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__UiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_UiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__IiL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_IiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__IiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__PiL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_PiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__PiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__FreqUiL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__FreqUiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__PFiL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_PFiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__PFiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PFiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__UiL2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_UiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__UiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_UiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__IiL2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_IiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__IiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__PiL2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_PiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__PiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__FreqUiL2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__FreqUiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__PFiL2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_PFiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__PFiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PFiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__UiL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_UiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__UiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_UiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__IiL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_IiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__IiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__PiL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_PiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__PiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__FreqUiL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__FreqUiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__PFiL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_PFiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__PFiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PFiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Pi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Pi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Pi"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Pfi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Pfi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Pfi"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pfi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__ViSet"&Global.Microsoft.VisualBasic.ChrW(10)
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__ViSet"&Global.Microsoft.VisualBasic.ChrW(10)
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__IbatSet"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_IbatSet"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__IbatSet"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IbatSet"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Ibat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Ibat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Ibat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Ibat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Vbat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Vbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Vbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Vbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Pbat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Pbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Pbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Pd"&Global.Microsoft.VisualBasic.ChrW(10)
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Pd"&Global.Microsoft.VisualBasic.ChrW(10)
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Pd"&Global.Microsoft.VisualBasic.ChrW(10)
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pd"&Global.Microsoft.VisualBasic.ChrW(10)
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Eta"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Eta"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Eta"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Eta"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__nHarmOrd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_nHarmOrd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__nHarmOrd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_nHarmOrd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__thdTot"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_thdTot"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__thdTot"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_thdTot"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__nHarmI"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_nHarmI"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__nHarmI"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_nHarmI"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__nHarmLim"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_nHarmLim"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__nHarmLim"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_nHarmLim"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""tblMeasDet"" (""ID"", ""IDMeas"", ""MeasOrd"", ""_UiL1"", ""_IiL1"", ""_P"& _ 
                "iL1"", ""_FreqUiL1"", ""_PFiL1"", ""_UiL2"", ""_IiL2"", ""_PiL2"", ""_FreqUiL2"", ""_PFiL2"", """& _ 
                "_UiL3"", ""_IiL3"", ""_PiL3"", ""_FreqUiL3"", ""_PFiL3"", ""_Pi"", ""_Pfi"", ""_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)&""", ""_Iba"& _ 
                "tSet"", ""_Ibat"", ""_Vbat"", ""_Pbat"", ""_Pd"&Global.Microsoft.VisualBasic.ChrW(10)&""", ""_Eta"", ""_nHarmOrd"", ""_thdTot"", ""_nHar"& _ 
                "mI"", ""_nHarmLim"") VALUES (:ID, :IDMeas, :MeasOrd, :_UiL1, :_IiL1, :_PiL1, :_Freq"& _ 
                "UiL1, :_PFiL1, :_UiL2, :_IiL2, :_PiL2, :_FreqUiL2, :_PFiL2, :_UiL3, :_IiL3, :_Pi"& _ 
                "L3, :_FreqUiL3, :_PFiL3, :_Pi, :_Pfi, :_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)&", :_IbatSet, :_Ibat, :_Vbat, :_Pba"& _ 
                "t, :_Pd"&Global.Microsoft.VisualBasic.ChrW(10)&", :_Eta, :_nHarmOrd, :_thdTot, :_nHarmI, :_nHarmLim)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IDMeas"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "IDMeas"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "MeasOrd"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "MeasOrd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_UiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_UiL1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_IiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IiL1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_PiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PiL1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_FreqUiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_PFiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PFiL1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_UiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_UiL2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_IiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IiL2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_PiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PiL2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_FreqUiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_PFiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PFiL2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_UiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_UiL3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_IiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IiL3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_PiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PiL3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_FreqUiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_PFiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PFiL3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Pi"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pi"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Pfi"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pfi"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_IbatSet"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IbatSet"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Ibat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Ibat"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Vbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Vbat"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Pbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pbat"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Pd"&Global.Microsoft.VisualBasic.ChrW(10)
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pd"&Global.Microsoft.VisualBasic.ChrW(10)
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Eta"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Eta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_nHarmOrd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_nHarmOrd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_thdTot"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_thdTot"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_nHarmI"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_nHarmI"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_nHarmLim"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_nHarmLim"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""tblMeasDet"" SET ""ID"" = :ID, ""IDMeas"" = :IDMeas, ""MeasOrd"" = :MeasO"& _ 
                "rd, ""_UiL1"" = :_UiL1, ""_IiL1"" = :_IiL1, ""_PiL1"" = :_PiL1, ""_FreqUiL1"" = :_FreqUi"& _ 
                "L1, ""_PFiL1"" = :_PFiL1, ""_UiL2"" = :_UiL2, ""_IiL2"" = :_IiL2, ""_PiL2"" = :_PiL2, ""_"& _ 
                "FreqUiL2"" = :_FreqUiL2, ""_PFiL2"" = :_PFiL2, ""_UiL3"" = :_UiL3, ""_IiL3"" = :_IiL3, "& _ 
                """_PiL3"" = :_PiL3, ""_FreqUiL3"" = :_FreqUiL3, ""_PFiL3"" = :_PFiL3, ""_Pi"" = :_Pi, ""_"& _ 
                "Pfi"" = :_Pfi, ""_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)&""" = :_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)&", ""_IbatSet"" = :_IbatSet, ""_Ibat"" = :_Ibat, ""_"& _ 
                "Vbat"" = :_Vbat, ""_Pbat"" = :_Pbat, ""_Pd"&Global.Microsoft.VisualBasic.ChrW(10)&""" = :_Pd"&Global.Microsoft.VisualBasic.ChrW(10)&", ""_Eta"" = :_Eta, ""_nHarmOrd"" = "& _ 
                ":_nHarmOrd, ""_thdTot"" = :_thdTot, ""_nHarmI"" = :_nHarmI, ""_nHarmLim"" = :_nHarmLim"& _ 
                " WHERE ((""ID"" = :Original_ID) AND ((:IsNull_IDMeas = 1 AND ""IDMeas"" IS NULL) OR "& _ 
                "(""IDMeas"" = :Original_IDMeas)) AND ((:IsNull_MeasOrd = 1 AND ""MeasOrd"" IS NULL) "& _ 
                "OR (""MeasOrd"" = :Original_MeasOrd)) AND ((:IsNull__UiL1 = 1 AND ""_UiL1"" IS NULL)"& _ 
                " OR (""_UiL1"" = :Original__UiL1)) AND ((:IsNull__IiL1 = 1 AND ""_IiL1"" IS NULL) OR"& _ 
                " (""_IiL1"" = :Original__IiL1)) AND ((:IsNull__PiL1 = 1 AND ""_PiL1"" IS NULL) OR ("""& _ 
                "_PiL1"" = :Original__PiL1)) AND ((:IsNull__FreqUiL1 = 1 AND ""_FreqUiL1"" IS NULL) "& _ 
                "OR (""_FreqUiL1"" = :Original__FreqUiL1)) AND ((:IsNull__PFiL1 = 1 AND ""_PFiL1"" IS"& _ 
                " NULL) OR (""_PFiL1"" = :Original__PFiL1)) AND ((:IsNull__UiL2 = 1 AND ""_UiL2"" IS "& _ 
                "NULL) OR (""_UiL2"" = :Original__UiL2)) AND ((:IsNull__IiL2 = 1 AND ""_IiL2"" IS NUL"& _ 
                "L) OR (""_IiL2"" = :Original__IiL2)) AND ((:IsNull__PiL2 = 1 AND ""_PiL2"" IS NULL) "& _ 
                "OR (""_PiL2"" = :Original__PiL2)) AND ((:IsNull__FreqUiL2 = 1 AND ""_FreqUiL2"" IS N"& _ 
                "ULL) OR (""_FreqUiL2"" = :Original__FreqUiL2)) AND ((:IsNull__PFiL2 = 1 AND ""_PFiL"& _ 
                "2"" IS NULL) OR (""_PFiL2"" = :Original__PFiL2)) AND ((:IsNull__UiL3 = 1 AND ""_UiL3"& _ 
                """ IS NULL) OR (""_UiL3"" = :Original__UiL3)) AND ((:IsNull__IiL3 = 1 AND ""_IiL3"" I"& _ 
                "S NULL) OR (""_IiL3"" = :Original__IiL3)) AND ((:IsNull__PiL3 = 1 AND ""_PiL3"" IS N"& _ 
                "ULL) OR (""_PiL3"" = :Original__PiL3)) AND ((:IsNull__FreqUiL3 = 1 AND ""_FreqUiL3"""& _ 
                " IS NULL) OR (""_FreqUiL3"" = :Original__FreqUiL3)) AND ((:IsNull__PFiL3 = 1 AND """& _ 
                "_PFiL3"" IS NULL) OR (""_PFiL3"" = :Original__PFiL3)) AND ((:IsNull__Pi = 1 AND ""_P"& _ 
                "i"" IS NULL) OR (""_Pi"" = :Original__Pi)) AND ((:IsNull__Pfi = 1 AND ""_Pfi"" IS NUL"& _ 
                "L) OR (""_Pfi"" = :Original__Pfi)) AND ((:IsNull__ViSet"&Global.Microsoft.VisualBasic.ChrW(10)&" = 1 AND ""_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)&""" IS NULL"& _ 
                ") OR (""_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)&""" = :Original__ViSet"&Global.Microsoft.VisualBasic.ChrW(10)&")) AND ((:IsNull__IbatSet = 1 AND ""_IbatSet"" "& _ 
                "IS NULL) OR (""_IbatSet"" = :Original__IbatSet)) AND ((:IsNull__Ibat = 1 AND ""_Iba"& _ 
                "t"" IS NULL) OR (""_Ibat"" = :Original__Ibat)) AND ((:IsNull__Vbat = 1 AND ""_Vbat"" "& _ 
                "IS NULL) OR (""_Vbat"" = :Original__Vbat)) AND ((:IsNull__Pbat = 1 AND ""_Pbat"" IS "& _ 
                "NULL) OR (""_Pbat"" = :Original__Pbat)) AND ((:IsNull__Pd"&Global.Microsoft.VisualBasic.ChrW(10)&" = 1 AND ""_Pd"&Global.Microsoft.VisualBasic.ChrW(10)&""" IS NULL)"& _ 
                " OR (""_Pd"&Global.Microsoft.VisualBasic.ChrW(10)&""" = :Original__Pd"&Global.Microsoft.VisualBasic.ChrW(10)&")) AND ((:IsNull__Eta = 1 AND ""_Eta"" IS NULL) OR (""_"& _ 
                "Eta"" = :Original__Eta)) AND ((:IsNull__nHarmOrd = 1 AND ""_nHarmOrd"" IS NULL) OR "& _ 
                "(""_nHarmOrd"" = :Original__nHarmOrd)) AND ((:IsNull__thdTot = 1 AND ""_thdTot"" IS "& _ 
                "NULL) OR (""_thdTot"" = :Original__thdTot)) AND ((:IsNull__nHarmI = 1 AND ""_nHarmI"& _ 
                """ IS NULL) OR (""_nHarmI"" = :Original__nHarmI)) AND ((:IsNull__nHarmLim = 1 AND """& _ 
                "_nHarmLim"" IS NULL) OR (""_nHarmLim"" = :Original__nHarmLim)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IDMeas"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "IDMeas"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "MeasOrd"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "MeasOrd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_UiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_UiL1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_IiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IiL1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_PiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PiL1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_FreqUiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_PFiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PFiL1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_UiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_UiL2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_IiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IiL2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_PiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PiL2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_FreqUiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_PFiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PFiL2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_UiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_UiL3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_IiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IiL3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_PiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PiL3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_FreqUiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_PFiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PFiL3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Pi"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pi"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Pfi"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pfi"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_IbatSet"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IbatSet"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Ibat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Ibat"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Vbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Vbat"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Pbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pbat"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Pd"&Global.Microsoft.VisualBasic.ChrW(10)
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pd"&Global.Microsoft.VisualBasic.ChrW(10)
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_Eta"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Eta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_nHarmOrd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_nHarmOrd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_thdTot"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_thdTot"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_nHarmI"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_nHarmI"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_nHarmLim"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_nHarmLim"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_IDMeas"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "IDMeas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_IDMeas"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "IDMeas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_MeasOrd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "MeasOrd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_MeasOrd"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "MeasOrd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__UiL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_UiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__UiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_UiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__IiL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_IiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__IiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__PiL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_PiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__PiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__FreqUiL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__FreqUiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__PFiL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_PFiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__PFiL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PFiL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__UiL2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_UiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__UiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_UiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__IiL2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_IiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__IiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__PiL2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_PiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__PiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__FreqUiL2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__FreqUiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__PFiL2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_PFiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__PFiL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PFiL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__UiL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_UiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__UiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_UiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__IiL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_IiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__IiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__PiL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_PiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__PiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__FreqUiL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__FreqUiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_FreqUiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__PFiL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_PFiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__PFiL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_PFiL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Pi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Pi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Pi"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Pfi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Pfi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Pfi"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pfi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__ViSet"&Global.Microsoft.VisualBasic.ChrW(10)
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__ViSet"&Global.Microsoft.VisualBasic.ChrW(10)
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_ViSet"&Global.Microsoft.VisualBasic.ChrW(10)
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__IbatSet"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_IbatSet"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__IbatSet"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_IbatSet"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Ibat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Ibat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Ibat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Ibat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Vbat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Vbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Vbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Vbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Pbat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Pbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Pbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Pd"&Global.Microsoft.VisualBasic.ChrW(10)
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Pd"&Global.Microsoft.VisualBasic.ChrW(10)
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Pd"&Global.Microsoft.VisualBasic.ChrW(10)
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Pd"&Global.Microsoft.VisualBasic.ChrW(10)
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__Eta"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_Eta"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__Eta"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_Eta"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__nHarmOrd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_nHarmOrd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__nHarmOrd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_nHarmOrd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__thdTot"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_thdTot"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__thdTot"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_thdTot"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__nHarmI"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_nHarmI"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__nHarmI"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_nHarmI"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__nHarmLim"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_nHarmLim"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__nHarmLim"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_nHarmLim"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.CreateTestData.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, IDMeas, MeasOrd, _UiL1, _IiL1, _PiL1, _FreqUiL1, _PFiL1, _UiL2, _IiL2,"& _ 
                " _PiL2, _FreqUiL2, _PFiL2, _UiL3, _IiL3, _PiL3, _FreqUiL3, _PFiL3, _Pi, _Pfi, ""_"& _ 
                "ViSet"&Global.Microsoft.VisualBasic.ChrW(10)&""", _IbatSet, _Ibat, _Vbat, _Pbat, ""_Pd"&Global.Microsoft.VisualBasic.ChrW(10)&""", _Eta, _nHarmOrd, _thdTot, _nHarm"& _ 
                "I, _nHarmLim FROM ""main"".tblMeasDet"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tblMeasDetDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.tblMeasDetDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.tblMeasDetDataTable = New DataSet1.tblMeasDetDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.tblMeasDetDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "tblMeasDet")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Long,  _
                    ByVal Original_IDMeas As Global.System.Nullable(Of Long),  _
                    ByVal Original_MeasOrd As Global.System.Nullable(Of Long),  _
                    ByVal Original__UiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__IiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__FreqUiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PFiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__UiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__IiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__FreqUiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PFiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__UiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__IiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__FreqUiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PFiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__Pi As Global.System.Nullable(Of Double),  _
                    ByVal Original__Pfi As Global.System.Nullable(Of Double),  _
                    ByVal _Original__ViSet_ As Global.System.Nullable(Of Double),  _
                    ByVal Original__IbatSet As Global.System.Nullable(Of Double),  _
                    ByVal Original__Ibat As Global.System.Nullable(Of Double),  _
                    ByVal Original__Vbat As Global.System.Nullable(Of Double),  _
                    ByVal Original__Pbat As Global.System.Nullable(Of Double),  _
                    ByVal _Original__Pd_ As Global.System.Nullable(Of Double),  _
                    ByVal Original__Eta As Global.System.Nullable(Of Double),  _
                    ByVal Original__nHarmOrd As Global.System.Nullable(Of Integer),  _
                    ByVal Original__thdTot As Global.System.Nullable(Of Double),  _
                    ByVal Original__nHarmI As Global.System.Nullable(Of Double),  _
                    ByVal Original__nHarmLim As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Long)
            If (Original_IDMeas.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IDMeas.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_MeasOrd.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MeasOrd.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original__UiL1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original__UiL1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original__IiL1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original__IiL1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original__PiL1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original__PiL1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original__FreqUiL1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original__FreqUiL1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original__PFiL1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original__PFiL1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original__UiL2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original__UiL2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original__IiL2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original__IiL2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original__PiL2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original__PiL2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original__FreqUiL2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original__FreqUiL2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original__PFiL2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original__PFiL2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original__UiL3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original__UiL3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original__IiL3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original__IiL3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original__PiL3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original__PiL3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original__FreqUiL3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original__FreqUiL3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original__PFiL3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original__PFiL3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original__Pi.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original__Pi.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original__Pfi.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original__Pfi.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (_Original__ViSet_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(_Original__ViSet_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original__IbatSet.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original__IbatSet.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original__Ibat.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original__Ibat.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original__Vbat.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original__Vbat.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original__Pbat.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original__Pbat.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (_Original__Pd_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(_Original__Pd_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original__Eta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original__Eta.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original__nHarmOrd.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original__nHarmOrd.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original__thdTot.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original__thdTot.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original__nHarmI.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original__nHarmI.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (Original__nHarmLim.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original__nHarmLim.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID As Long,  _
                    ByVal IDMeas As Global.System.Nullable(Of Long),  _
                    ByVal MeasOrd As Global.System.Nullable(Of Long),  _
                    ByVal _UiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _IiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _PiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _FreqUiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _PFiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _UiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _IiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _PiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _FreqUiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _PFiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _UiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _IiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _PiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _FreqUiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _PFiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _Pi As Global.System.Nullable(Of Double),  _
                    ByVal _Pfi As Global.System.Nullable(Of Double),  _
                    ByVal __ViSet_ As Global.System.Nullable(Of Double),  _
                    ByVal _IbatSet As Global.System.Nullable(Of Double),  _
                    ByVal _Ibat As Global.System.Nullable(Of Double),  _
                    ByVal _Vbat As Global.System.Nullable(Of Double),  _
                    ByVal _Pbat As Global.System.Nullable(Of Double),  _
                    ByVal __Pd_ As Global.System.Nullable(Of Double),  _
                    ByVal _Eta As Global.System.Nullable(Of Double),  _
                    ByVal _nHarmOrd As Global.System.Nullable(Of Integer),  _
                    ByVal _thdTot As Global.System.Nullable(Of Double),  _
                    ByVal _nHarmI As Global.System.Nullable(Of Double),  _
                    ByVal _nHarmLim As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Long)
            If (IDMeas.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IDMeas.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MeasOrd.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MeasOrd.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (_UiL1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_UiL1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (_IiL1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_IiL1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (_PiL1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_PiL1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (_FreqUiL1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(_FreqUiL1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (_PFiL1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(_PFiL1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (_UiL2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(_UiL2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (_IiL2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(_IiL2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (_PiL2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_PiL2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (_FreqUiL2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(_FreqUiL2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (_PFiL2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(_PFiL2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (_UiL3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(_UiL3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (_IiL3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(_IiL3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (_PiL3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(_PiL3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (_FreqUiL3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(_FreqUiL3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (_PFiL3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(_PFiL3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (_Pi.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(_Pi.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (_Pfi.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(_Pfi.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (__ViSet_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(__ViSet_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (_IbatSet.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(_IbatSet.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (_Ibat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(_Ibat.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (_Vbat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(_Vbat.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (_Pbat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(_Pbat.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (__Pd_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(__Pd_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (_Eta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(_Eta.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (_nHarmOrd.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(_nHarmOrd.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (_thdTot.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(_thdTot.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (_nHarmI.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(_nHarmI.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (_nHarmLim.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(_nHarmLim.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID As Long,  _
                    ByVal IDMeas As Global.System.Nullable(Of Long),  _
                    ByVal MeasOrd As Global.System.Nullable(Of Long),  _
                    ByVal _UiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _IiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _PiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _FreqUiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _PFiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _UiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _IiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _PiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _FreqUiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _PFiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _UiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _IiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _PiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _FreqUiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _PFiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _Pi As Global.System.Nullable(Of Double),  _
                    ByVal _Pfi As Global.System.Nullable(Of Double),  _
                    ByVal __ViSet_ As Global.System.Nullable(Of Double),  _
                    ByVal _IbatSet As Global.System.Nullable(Of Double),  _
                    ByVal _Ibat As Global.System.Nullable(Of Double),  _
                    ByVal _Vbat As Global.System.Nullable(Of Double),  _
                    ByVal _Pbat As Global.System.Nullable(Of Double),  _
                    ByVal __Pd_ As Global.System.Nullable(Of Double),  _
                    ByVal _Eta As Global.System.Nullable(Of Double),  _
                    ByVal _nHarmOrd As Global.System.Nullable(Of Integer),  _
                    ByVal _thdTot As Global.System.Nullable(Of Double),  _
                    ByVal _nHarmI As Global.System.Nullable(Of Double),  _
                    ByVal _nHarmLim As Global.System.Nullable(Of Double),  _
                    ByVal Original_ID As Long,  _
                    ByVal Original_IDMeas As Global.System.Nullable(Of Long),  _
                    ByVal Original_MeasOrd As Global.System.Nullable(Of Long),  _
                    ByVal Original__UiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__IiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__FreqUiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PFiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__UiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__IiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__FreqUiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PFiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__UiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__IiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__FreqUiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PFiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__Pi As Global.System.Nullable(Of Double),  _
                    ByVal Original__Pfi As Global.System.Nullable(Of Double),  _
                    ByVal _Original__ViSet_ As Global.System.Nullable(Of Double),  _
                    ByVal Original__IbatSet As Global.System.Nullable(Of Double),  _
                    ByVal Original__Ibat As Global.System.Nullable(Of Double),  _
                    ByVal Original__Vbat As Global.System.Nullable(Of Double),  _
                    ByVal Original__Pbat As Global.System.Nullable(Of Double),  _
                    ByVal _Original__Pd_ As Global.System.Nullable(Of Double),  _
                    ByVal Original__Eta As Global.System.Nullable(Of Double),  _
                    ByVal Original__nHarmOrd As Global.System.Nullable(Of Integer),  _
                    ByVal Original__thdTot As Global.System.Nullable(Of Double),  _
                    ByVal Original__nHarmI As Global.System.Nullable(Of Double),  _
                    ByVal Original__nHarmLim As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID,Long)
            If (IDMeas.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IDMeas.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MeasOrd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MeasOrd.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (_UiL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(_UiL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (_IiL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(_IiL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (_PiL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(_PiL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (_FreqUiL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(_FreqUiL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (_PFiL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(_PFiL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (_UiL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(_UiL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (_IiL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(_IiL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (_PiL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(_PiL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (_FreqUiL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(_FreqUiL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (_PFiL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(_PFiL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (_UiL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(_UiL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (_IiL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(_IiL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (_PiL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(_PiL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (_FreqUiL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(_FreqUiL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (_PFiL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(_PFiL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (_Pi.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(_Pi.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (_Pfi.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(_Pfi.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (__ViSet_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(__ViSet_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (_IbatSet.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(_IbatSet.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (_Ibat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(_Ibat.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (_Vbat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(_Vbat.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (_Pbat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(_Pbat.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (__Pd_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(__Pd_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (_Eta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(_Eta.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (_nHarmOrd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(_nHarmOrd.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (_thdTot.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(_thdTot.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (_nHarmI.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(_nHarmI.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (_nHarmLim.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(_nHarmLim.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ID,Long)
            If (Original_IDMeas.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_IDMeas.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_MeasOrd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_MeasOrd.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original__UiL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original__UiL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original__IiL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original__IiL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original__PiL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original__PiL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original__FreqUiL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original__FreqUiL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original__PFiL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original__PFiL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original__UiL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original__UiL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original__IiL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original__IiL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original__PiL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original__PiL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original__FreqUiL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original__FreqUiL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original__PFiL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original__PFiL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original__UiL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original__UiL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original__IiL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original__IiL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original__PiL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original__PiL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original__FreqUiL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original__FreqUiL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original__PFiL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original__PFiL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original__Pi.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original__Pi.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original__Pfi.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original__Pfi.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (_Original__ViSet_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(_Original__ViSet_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original__IbatSet.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original__IbatSet.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original__Ibat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original__Ibat.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original__Vbat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original__Vbat.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (Original__Pbat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original__Pbat.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (_Original__Pd_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(_Original__Pd_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (Original__Eta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original__Eta.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (Original__nHarmOrd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original__nHarmOrd.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (Original__thdTot.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original__thdTot.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (Original__nHarmI.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original__nHarmI.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            End If
            If (Original__nHarmLim.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original__nHarmLim.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal IDMeas As Global.System.Nullable(Of Long),  _
                    ByVal MeasOrd As Global.System.Nullable(Of Long),  _
                    ByVal _UiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _IiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _PiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _FreqUiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _PFiL1 As Global.System.Nullable(Of Double),  _
                    ByVal _UiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _IiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _PiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _FreqUiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _PFiL2 As Global.System.Nullable(Of Double),  _
                    ByVal _UiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _IiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _PiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _FreqUiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _PFiL3 As Global.System.Nullable(Of Double),  _
                    ByVal _Pi As Global.System.Nullable(Of Double),  _
                    ByVal _Pfi As Global.System.Nullable(Of Double),  _
                    ByVal __ViSet_ As Global.System.Nullable(Of Double),  _
                    ByVal _IbatSet As Global.System.Nullable(Of Double),  _
                    ByVal _Ibat As Global.System.Nullable(Of Double),  _
                    ByVal _Vbat As Global.System.Nullable(Of Double),  _
                    ByVal _Pbat As Global.System.Nullable(Of Double),  _
                    ByVal __Pd_ As Global.System.Nullable(Of Double),  _
                    ByVal _Eta As Global.System.Nullable(Of Double),  _
                    ByVal _nHarmOrd As Global.System.Nullable(Of Integer),  _
                    ByVal _thdTot As Global.System.Nullable(Of Double),  _
                    ByVal _nHarmI As Global.System.Nullable(Of Double),  _
                    ByVal _nHarmLim As Global.System.Nullable(Of Double),  _
                    ByVal Original_ID As Long,  _
                    ByVal Original_IDMeas As Global.System.Nullable(Of Long),  _
                    ByVal Original_MeasOrd As Global.System.Nullable(Of Long),  _
                    ByVal Original__UiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__IiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__FreqUiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PFiL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__UiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__IiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__FreqUiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PFiL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__UiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__IiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__FreqUiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__PFiL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__Pi As Global.System.Nullable(Of Double),  _
                    ByVal Original__Pfi As Global.System.Nullable(Of Double),  _
                    ByVal _Original__ViSet_ As Global.System.Nullable(Of Double),  _
                    ByVal Original__IbatSet As Global.System.Nullable(Of Double),  _
                    ByVal Original__Ibat As Global.System.Nullable(Of Double),  _
                    ByVal Original__Vbat As Global.System.Nullable(Of Double),  _
                    ByVal Original__Pbat As Global.System.Nullable(Of Double),  _
                    ByVal _Original__Pd_ As Global.System.Nullable(Of Double),  _
                    ByVal Original__Eta As Global.System.Nullable(Of Double),  _
                    ByVal Original__nHarmOrd As Global.System.Nullable(Of Integer),  _
                    ByVal Original__thdTot As Global.System.Nullable(Of Double),  _
                    ByVal Original__nHarmI As Global.System.Nullable(Of Double),  _
                    ByVal Original__nHarmLim As Global.System.Nullable(Of Double)) As Integer
            Return Me.Update(Original_ID, IDMeas, MeasOrd, _UiL1, _IiL1, _PiL1, _FreqUiL1, _PFiL1, _UiL2, _IiL2, _PiL2, _FreqUiL2, _PFiL2, _UiL3, _IiL3, _PiL3, _FreqUiL3, _PFiL3, _Pi, _Pfi, __ViSet_, _IbatSet, _Ibat, _Vbat, _Pbat, __Pd_, _Eta, _nHarmOrd, _thdTot, _nHarmI, _nHarmLim, Original_ID, Original_IDMeas, Original_MeasOrd, Original__UiL1, Original__IiL1, Original__PiL1, Original__FreqUiL1, Original__PFiL1, Original__UiL2, Original__IiL2, Original__PiL2, Original__FreqUiL2, Original__PFiL2, Original__UiL3, Original__IiL3, Original__PiL3, Original__FreqUiL3, Original__PFiL3, Original__Pi, Original__Pfi, _Original__ViSet_, Original__IbatSet, Original__Ibat, Original__Vbat, Original__Pbat, _Original__Pd_, Original__Eta, Original__nHarmOrd, Original__thdTot, Original__nHarmI, Original__nHarmLim)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblMeasDetRbTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblMeasDetRb"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("IdMeasDet", "IdMeasDet")
            tableMapping.ColumnMappings.Add("_rbVoltL1", "_rbVoltL1")
            tableMapping.ColumnMappings.Add("_rbVolt2", "_rbVolt2")
            tableMapping.ColumnMappings.Add("_rbVoltL3", "_rbVoltL3")
            tableMapping.ColumnMappings.Add("_rbCurrL1", "_rbCurrL1")
            tableMapping.ColumnMappings.Add("_rbCurrL2", "_rbCurrL2")
            tableMapping.ColumnMappings.Add("_rbCurrL3", "_rbCurrL3")
            tableMapping.ColumnMappings.Add("_rbIbat", "_rbIbat")
            tableMapping.ColumnMappings.Add("_rbVbat", "_rbVbat")
            tableMapping.ColumnMappings.Add("_rbIbatMaxAv", "_rbIbatMaxAv")
            tableMapping.ColumnMappings.Add("_rbFreq", "_rbFreq")
            tableMapping.ColumnMappings.Add("_rbLVbat", "_rbLVbat")
            tableMapping.ColumnMappings.Add("_rbTempPerc", "_rbTempPerc")
            tableMapping.ColumnMappings.Add("_rbSigTamb", "_rbSigTamb")
            tableMapping.ColumnMappings.Add("_rbSigTchas", "_rbSigTchas")
            tableMapping.ColumnMappings.Add("_rbSigTexCon", "_rbSigTexCon")
            tableMapping.ColumnMappings.Add("_rbExtSenTyp", "_rbExtSenTyp")
            tableMapping.ColumnMappings.Add("_rbErrStatus", "_rbErrStatus")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""tblMeasDetRb"" WHERE ((""ID"" = :Original_ID) AND ((:IsNull_IdMe"& _ 
                "asDet = 1 AND ""IdMeasDet"" IS NULL) OR (""IdMeasDet"" = :Original_IdMeasDet)) AND ("& _ 
                "(:IsNull__rbVoltL1 = 1 AND ""_rbVoltL1"" IS NULL) OR (""_rbVoltL1"" = :Original__rbV"& _ 
                "oltL1)) AND ((:IsNull__rbVolt2 = 1 AND ""_rbVolt2"" IS NULL) OR (""_rbVolt2"" = :Ori"& _ 
                "ginal__rbVolt2)) AND ((:IsNull__rbVoltL3 = 1 AND ""_rbVoltL3"" IS NULL) OR (""_rbVo"& _ 
                "ltL3"" = :Original__rbVoltL3)) AND ((:IsNull__rbCurrL1 = 1 AND ""_rbCurrL1"" IS NUL"& _ 
                "L) OR (""_rbCurrL1"" = :Original__rbCurrL1)) AND ((:IsNull__rbCurrL2 = 1 AND ""_rbC"& _ 
                "urrL2"" IS NULL) OR (""_rbCurrL2"" = :Original__rbCurrL2)) AND ((:IsNull__rbCurrL3 "& _ 
                "= 1 AND ""_rbCurrL3"" IS NULL) OR (""_rbCurrL3"" = :Original__rbCurrL3)) AND ((:IsNu"& _ 
                "ll__rbIbat = 1 AND ""_rbIbat"" IS NULL) OR (""_rbIbat"" = :Original__rbIbat)) AND (("& _ 
                ":IsNull__rbVbat = 1 AND ""_rbVbat"" IS NULL) OR (""_rbVbat"" = :Original__rbVbat)) A"& _ 
                "ND ((:IsNull__rbIbatMaxAv = 1 AND ""_rbIbatMaxAv"" IS NULL) OR (""_rbIbatMaxAv"" = :"& _ 
                "Original__rbIbatMaxAv)) AND ((:IsNull__rbFreq = 1 AND ""_rbFreq"" IS NULL) OR (""_r"& _ 
                "bFreq"" = :Original__rbFreq)) AND ((:IsNull__rbLVbat = 1 AND ""_rbLVbat"" IS NULL) "& _ 
                "OR (""_rbLVbat"" = :Original__rbLVbat)) AND ((:IsNull__rbTempPerc = 1 AND ""_rbTemp"& _ 
                "Perc"" IS NULL) OR (""_rbTempPerc"" = :Original__rbTempPerc)) AND ((:IsNull__rbSigT"& _ 
                "amb = 1 AND ""_rbSigTamb"" IS NULL) OR (""_rbSigTamb"" = :Original__rbSigTamb)) AND "& _ 
                "((:IsNull__rbSigTchas = 1 AND ""_rbSigTchas"" IS NULL) OR (""_rbSigTchas"" = :Origin"& _ 
                "al__rbSigTchas)) AND ((:IsNull__rbSigTexCon = 1 AND ""_rbSigTexCon"" IS NULL) OR ("& _ 
                """_rbSigTexCon"" = :Original__rbSigTexCon)) AND ((:IsNull__rbExtSenTyp = 1 AND ""_r"& _ 
                "bExtSenTyp"" IS NULL) OR (""_rbExtSenTyp"" = :Original__rbExtSenTyp)) AND ((:IsNull"& _ 
                "__rbErrStatus = 1 AND ""_rbErrStatus"" IS NULL) OR (""_rbErrStatus"" = :Original__rb"& _ 
                "ErrStatus)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_IdMeasDet"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "IdMeasDet"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_IdMeasDet"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "IdMeasDet"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbVoltL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbVoltL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbVoltL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVoltL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbVolt2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbVolt2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbVolt2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVolt2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbVoltL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbVoltL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbVoltL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVoltL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbCurrL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbCurrL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbCurrL2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbCurrL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbCurrL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbCurrL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbIbat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbIbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbIbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbIbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbVbat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbVbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbVbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbIbatMaxAv"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbIbatMaxAv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbIbatMaxAv"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbIbatMaxAv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbFreq"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbFreq"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbFreq"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbFreq"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbLVbat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbLVbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbLVbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbLVbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbTempPerc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbTempPerc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbTempPerc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbTempPerc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbSigTamb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbSigTamb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbSigTamb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbSigTamb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbSigTchas"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbSigTchas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbSigTchas"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbSigTchas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbSigTexCon"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbSigTexCon"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbSigTexCon"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbSigTexCon"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbExtSenTyp"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbExtSenTyp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbExtSenTyp"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbExtSenTyp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbErrStatus"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbErrStatus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbErrStatus"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "_rbErrStatus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""tblMeasDetRb"" (""ID"", ""IdMeasDet"", ""_rbVoltL1"", ""_rbVolt2"", ""_"& _ 
                "rbVoltL3"", ""_rbCurrL1"", ""_rbCurrL2"", ""_rbCurrL3"", ""_rbIbat"", ""_rbVbat"", ""_rbIbat"& _ 
                "MaxAv"", ""_rbFreq"", ""_rbLVbat"", ""_rbTempPerc"", ""_rbSigTamb"", ""_rbSigTchas"", ""_rbS"& _ 
                "igTexCon"", ""_rbExtSenTyp"", ""_rbErrStatus"") VALUES (:ID, :IdMeasDet, :_rbVoltL1, "& _ 
                ":_rbVolt2, :_rbVoltL3, :_rbCurrL1, :_rbCurrL2, :_rbCurrL3, :_rbIbat, :_rbVbat, :"& _ 
                "_rbIbatMaxAv, :_rbFreq, :_rbLVbat, :_rbTempPerc, :_rbSigTamb, :_rbSigTchas, :_rb"& _ 
                "SigTexCon, :_rbExtSenTyp, :_rbErrStatus)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IdMeasDet"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "IdMeasDet"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbVoltL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVoltL1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbVolt2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVolt2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbVoltL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVoltL3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbCurrL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbCurrL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbCurrL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbIbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbIbat"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbVbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVbat"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbIbatMaxAv"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbIbatMaxAv"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbFreq"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbFreq"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbLVbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbLVbat"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbTempPerc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbTempPerc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbSigTamb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbSigTamb"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbSigTchas"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbSigTchas"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbSigTexCon"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbSigTexCon"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbExtSenTyp"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbExtSenTyp"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbErrStatus"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "_rbErrStatus"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""tblMeasDetRb"" SET ""ID"" = :ID, ""IdMeasDet"" = :IdMeasDet, ""_rbVoltL1"& _ 
                """ = :_rbVoltL1, ""_rbVolt2"" = :_rbVolt2, ""_rbVoltL3"" = :_rbVoltL3, ""_rbCurrL1"" = "& _ 
                ":_rbCurrL1, ""_rbCurrL2"" = :_rbCurrL2, ""_rbCurrL3"" = :_rbCurrL3, ""_rbIbat"" = :_rb"& _ 
                "Ibat, ""_rbVbat"" = :_rbVbat, ""_rbIbatMaxAv"" = :_rbIbatMaxAv, ""_rbFreq"" = :_rbFreq"& _ 
                ", ""_rbLVbat"" = :_rbLVbat, ""_rbTempPerc"" = :_rbTempPerc, ""_rbSigTamb"" = :_rbSigTa"& _ 
                "mb, ""_rbSigTchas"" = :_rbSigTchas, ""_rbSigTexCon"" = :_rbSigTexCon, ""_rbExtSenTyp"""& _ 
                " = :_rbExtSenTyp, ""_rbErrStatus"" = :_rbErrStatus WHERE ((""ID"" = :Original_ID) AN"& _ 
                "D ((:IsNull_IdMeasDet = 1 AND ""IdMeasDet"" IS NULL) OR (""IdMeasDet"" = :Original_I"& _ 
                "dMeasDet)) AND ((:IsNull__rbVoltL1 = 1 AND ""_rbVoltL1"" IS NULL) OR (""_rbVoltL1"" "& _ 
                "= :Original__rbVoltL1)) AND ((:IsNull__rbVolt2 = 1 AND ""_rbVolt2"" IS NULL) OR ("""& _ 
                "_rbVolt2"" = :Original__rbVolt2)) AND ((:IsNull__rbVoltL3 = 1 AND ""_rbVoltL3"" IS "& _ 
                "NULL) OR (""_rbVoltL3"" = :Original__rbVoltL3)) AND ((:IsNull__rbCurrL1 = 1 AND ""_"& _ 
                "rbCurrL1"" IS NULL) OR (""_rbCurrL1"" = :Original__rbCurrL1)) AND ((:IsNull__rbCurr"& _ 
                "L2 = 1 AND ""_rbCurrL2"" IS NULL) OR (""_rbCurrL2"" = :Original__rbCurrL2)) AND ((:I"& _ 
                "sNull__rbCurrL3 = 1 AND ""_rbCurrL3"" IS NULL) OR (""_rbCurrL3"" = :Original__rbCurr"& _ 
                "L3)) AND ((:IsNull__rbIbat = 1 AND ""_rbIbat"" IS NULL) OR (""_rbIbat"" = :Original_"& _ 
                "_rbIbat)) AND ((:IsNull__rbVbat = 1 AND ""_rbVbat"" IS NULL) OR (""_rbVbat"" = :Orig"& _ 
                "inal__rbVbat)) AND ((:IsNull__rbIbatMaxAv = 1 AND ""_rbIbatMaxAv"" IS NULL) OR (""_"& _ 
                "rbIbatMaxAv"" = :Original__rbIbatMaxAv)) AND ((:IsNull__rbFreq = 1 AND ""_rbFreq"" "& _ 
                "IS NULL) OR (""_rbFreq"" = :Original__rbFreq)) AND ((:IsNull__rbLVbat = 1 AND ""_rb"& _ 
                "LVbat"" IS NULL) OR (""_rbLVbat"" = :Original__rbLVbat)) AND ((:IsNull__rbTempPerc "& _ 
                "= 1 AND ""_rbTempPerc"" IS NULL) OR (""_rbTempPerc"" = :Original__rbTempPerc)) AND ("& _ 
                "(:IsNull__rbSigTamb = 1 AND ""_rbSigTamb"" IS NULL) OR (""_rbSigTamb"" = :Original__"& _ 
                "rbSigTamb)) AND ((:IsNull__rbSigTchas = 1 AND ""_rbSigTchas"" IS NULL) OR (""_rbSig"& _ 
                "Tchas"" = :Original__rbSigTchas)) AND ((:IsNull__rbSigTexCon = 1 AND ""_rbSigTexCo"& _ 
                "n"" IS NULL) OR (""_rbSigTexCon"" = :Original__rbSigTexCon)) AND ((:IsNull__rbExtSe"& _ 
                "nTyp = 1 AND ""_rbExtSenTyp"" IS NULL) OR (""_rbExtSenTyp"" = :Original__rbExtSenTyp"& _ 
                ")) AND ((:IsNull__rbErrStatus = 1 AND ""_rbErrStatus"" IS NULL) OR (""_rbErrStatus"""& _ 
                " = :Original__rbErrStatus)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IdMeasDet"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "IdMeasDet"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbVoltL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVoltL1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbVolt2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVolt2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbVoltL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVoltL3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbCurrL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbCurrL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbCurrL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbIbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbIbat"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbVbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVbat"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbIbatMaxAv"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbIbatMaxAv"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbFreq"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbFreq"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbLVbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbLVbat"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbTempPerc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbTempPerc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbSigTamb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbSigTamb"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbSigTchas"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbSigTchas"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbSigTexCon"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbSigTexCon"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbExtSenTyp"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbExtSenTyp"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "_rbErrStatus"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "_rbErrStatus"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_IdMeasDet"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "IdMeasDet"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_IdMeasDet"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "IdMeasDet"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbVoltL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbVoltL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbVoltL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVoltL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbVolt2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbVolt2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbVolt2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVolt2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbVoltL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbVoltL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbVoltL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVoltL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbCurrL1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbCurrL1"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbCurrL2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbCurrL2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbCurrL3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbCurrL3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbCurrL3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbIbat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbIbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbIbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbIbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbVbat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbVbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbVbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbVbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbIbatMaxAv"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbIbatMaxAv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbIbatMaxAv"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbIbatMaxAv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbFreq"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbFreq"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbFreq"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbFreq"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbLVbat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbLVbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbLVbat"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbLVbat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbTempPerc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbTempPerc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbTempPerc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbTempPerc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbSigTamb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbSigTamb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbSigTamb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbSigTamb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbSigTchas"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbSigTchas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbSigTchas"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbSigTchas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbSigTexCon"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbSigTexCon"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbSigTexCon"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbSigTexCon"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbExtSenTyp"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbExtSenTyp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbExtSenTyp"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "_rbExtSenTyp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull__rbErrStatus"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "_rbErrStatus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original__rbErrStatus"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "_rbErrStatus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.CreateTestData.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, IdMeasDet, _rbVoltL1, _rbVolt2, _rbVoltL3, _rbCurrL1, _rbCurrL2, _rbCu"& _ 
                "rrL3, _rbIbat, _rbVbat, _rbIbatMaxAv, _rbFreq, _rbLVbat, _rbTempPerc, _rbSigTamb"& _ 
                ", _rbSigTchas, _rbSigTexCon, _rbExtSenTyp, _rbErrStatus FROM ""main"".tblMeasDetRb"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tblMeasDetRbDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.tblMeasDetRbDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.tblMeasDetRbDataTable = New DataSet1.tblMeasDetRbDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.tblMeasDetRbDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "tblMeasDetRb")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Long,  _
                    ByVal Original_IdMeasDet As Global.System.Nullable(Of Long),  _
                    ByVal Original__rbVoltL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbVolt2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbVoltL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbCurrL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbCurrL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbCurrL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbIbat As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbVbat As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbIbatMaxAv As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbFreq As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbLVbat As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbTempPerc As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbSigTamb As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbSigTchas As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbSigTexCon As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbExtSenTyp As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbErrStatus As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Long)
            If (Original_IdMeasDet.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IdMeasDet.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original__rbVoltL1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original__rbVoltL1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original__rbVolt2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original__rbVolt2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original__rbVoltL3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original__rbVoltL3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original__rbCurrL1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original__rbCurrL1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original__rbCurrL2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original__rbCurrL2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original__rbCurrL3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original__rbCurrL3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original__rbIbat.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original__rbIbat.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original__rbVbat.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original__rbVbat.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original__rbIbatMaxAv.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original__rbIbatMaxAv.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original__rbFreq.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original__rbFreq.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original__rbLVbat.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original__rbLVbat.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original__rbTempPerc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original__rbTempPerc.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original__rbSigTamb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original__rbSigTamb.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original__rbSigTchas.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original__rbSigTchas.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original__rbSigTexCon.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original__rbSigTexCon.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original__rbExtSenTyp.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original__rbExtSenTyp.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original__rbErrStatus Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original__rbErrStatus,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID As Long,  _
                    ByVal IdMeasDet As Global.System.Nullable(Of Long),  _
                    ByVal _rbVoltL1 As Global.System.Nullable(Of Double),  _
                    ByVal _rbVolt2 As Global.System.Nullable(Of Double),  _
                    ByVal _rbVoltL3 As Global.System.Nullable(Of Double),  _
                    ByVal _rbCurrL1 As Global.System.Nullable(Of Double),  _
                    ByVal _rbCurrL2 As Global.System.Nullable(Of Double),  _
                    ByVal _rbCurrL3 As Global.System.Nullable(Of Double),  _
                    ByVal _rbIbat As Global.System.Nullable(Of Double),  _
                    ByVal _rbVbat As Global.System.Nullable(Of Double),  _
                    ByVal _rbIbatMaxAv As Global.System.Nullable(Of Double),  _
                    ByVal _rbFreq As Global.System.Nullable(Of Double),  _
                    ByVal _rbLVbat As Global.System.Nullable(Of Double),  _
                    ByVal _rbTempPerc As Global.System.Nullable(Of Double),  _
                    ByVal _rbSigTamb As Global.System.Nullable(Of Double),  _
                    ByVal _rbSigTchas As Global.System.Nullable(Of Double),  _
                    ByVal _rbSigTexCon As Global.System.Nullable(Of Double),  _
                    ByVal _rbExtSenTyp As Global.System.Nullable(Of Double),  _
                    ByVal _rbErrStatus As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Long)
            If (IdMeasDet.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IdMeasDet.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (_rbVoltL1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(_rbVoltL1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (_rbVolt2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_rbVolt2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (_rbVoltL3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_rbVoltL3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (_rbCurrL1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_rbCurrL1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (_rbCurrL2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(_rbCurrL2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (_rbCurrL3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(_rbCurrL3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (_rbIbat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(_rbIbat.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (_rbVbat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(_rbVbat.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (_rbIbatMaxAv.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_rbIbatMaxAv.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (_rbFreq.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(_rbFreq.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (_rbLVbat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(_rbLVbat.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (_rbTempPerc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(_rbTempPerc.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (_rbSigTamb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(_rbSigTamb.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (_rbSigTchas.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(_rbSigTchas.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (_rbSigTexCon.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(_rbSigTexCon.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (_rbExtSenTyp.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(_rbExtSenTyp.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (_rbErrStatus Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(_rbErrStatus,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID As Long,  _
                    ByVal IdMeasDet As Global.System.Nullable(Of Long),  _
                    ByVal _rbVoltL1 As Global.System.Nullable(Of Double),  _
                    ByVal _rbVolt2 As Global.System.Nullable(Of Double),  _
                    ByVal _rbVoltL3 As Global.System.Nullable(Of Double),  _
                    ByVal _rbCurrL1 As Global.System.Nullable(Of Double),  _
                    ByVal _rbCurrL2 As Global.System.Nullable(Of Double),  _
                    ByVal _rbCurrL3 As Global.System.Nullable(Of Double),  _
                    ByVal _rbIbat As Global.System.Nullable(Of Double),  _
                    ByVal _rbVbat As Global.System.Nullable(Of Double),  _
                    ByVal _rbIbatMaxAv As Global.System.Nullable(Of Double),  _
                    ByVal _rbFreq As Global.System.Nullable(Of Double),  _
                    ByVal _rbLVbat As Global.System.Nullable(Of Double),  _
                    ByVal _rbTempPerc As Global.System.Nullable(Of Double),  _
                    ByVal _rbSigTamb As Global.System.Nullable(Of Double),  _
                    ByVal _rbSigTchas As Global.System.Nullable(Of Double),  _
                    ByVal _rbSigTexCon As Global.System.Nullable(Of Double),  _
                    ByVal _rbExtSenTyp As Global.System.Nullable(Of Double),  _
                    ByVal _rbErrStatus As String,  _
                    ByVal Original_ID As Long,  _
                    ByVal Original_IdMeasDet As Global.System.Nullable(Of Long),  _
                    ByVal Original__rbVoltL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbVolt2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbVoltL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbCurrL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbCurrL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbCurrL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbIbat As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbVbat As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbIbatMaxAv As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbFreq As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbLVbat As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbTempPerc As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbSigTamb As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbSigTchas As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbSigTexCon As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbExtSenTyp As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbErrStatus As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID,Long)
            If (IdMeasDet.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IdMeasDet.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (_rbVoltL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(_rbVoltL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (_rbVolt2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(_rbVolt2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (_rbVoltL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(_rbVoltL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (_rbCurrL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(_rbCurrL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (_rbCurrL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(_rbCurrL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (_rbCurrL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(_rbCurrL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (_rbIbat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(_rbIbat.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (_rbVbat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(_rbVbat.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (_rbIbatMaxAv.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(_rbIbatMaxAv.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (_rbFreq.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(_rbFreq.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (_rbLVbat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(_rbLVbat.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (_rbTempPerc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(_rbTempPerc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (_rbSigTamb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(_rbSigTamb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (_rbSigTchas.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(_rbSigTchas.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (_rbSigTexCon.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(_rbSigTexCon.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (_rbExtSenTyp.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(_rbExtSenTyp.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (_rbErrStatus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(_rbErrStatus,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ID,Long)
            If (Original_IdMeasDet.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_IdMeasDet.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original__rbVoltL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original__rbVoltL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original__rbVolt2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original__rbVolt2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original__rbVoltL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original__rbVoltL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original__rbCurrL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original__rbCurrL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original__rbCurrL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original__rbCurrL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original__rbCurrL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original__rbCurrL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original__rbIbat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original__rbIbat.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original__rbVbat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original__rbVbat.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original__rbIbatMaxAv.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original__rbIbatMaxAv.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original__rbFreq.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original__rbFreq.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original__rbLVbat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original__rbLVbat.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original__rbTempPerc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original__rbTempPerc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original__rbSigTamb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original__rbSigTamb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original__rbSigTchas.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original__rbSigTchas.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original__rbSigTexCon.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original__rbSigTexCon.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original__rbExtSenTyp.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original__rbExtSenTyp.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original__rbErrStatus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original__rbErrStatus,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal IdMeasDet As Global.System.Nullable(Of Long),  _
                    ByVal _rbVoltL1 As Global.System.Nullable(Of Double),  _
                    ByVal _rbVolt2 As Global.System.Nullable(Of Double),  _
                    ByVal _rbVoltL3 As Global.System.Nullable(Of Double),  _
                    ByVal _rbCurrL1 As Global.System.Nullable(Of Double),  _
                    ByVal _rbCurrL2 As Global.System.Nullable(Of Double),  _
                    ByVal _rbCurrL3 As Global.System.Nullable(Of Double),  _
                    ByVal _rbIbat As Global.System.Nullable(Of Double),  _
                    ByVal _rbVbat As Global.System.Nullable(Of Double),  _
                    ByVal _rbIbatMaxAv As Global.System.Nullable(Of Double),  _
                    ByVal _rbFreq As Global.System.Nullable(Of Double),  _
                    ByVal _rbLVbat As Global.System.Nullable(Of Double),  _
                    ByVal _rbTempPerc As Global.System.Nullable(Of Double),  _
                    ByVal _rbSigTamb As Global.System.Nullable(Of Double),  _
                    ByVal _rbSigTchas As Global.System.Nullable(Of Double),  _
                    ByVal _rbSigTexCon As Global.System.Nullable(Of Double),  _
                    ByVal _rbExtSenTyp As Global.System.Nullable(Of Double),  _
                    ByVal _rbErrStatus As String,  _
                    ByVal Original_ID As Long,  _
                    ByVal Original_IdMeasDet As Global.System.Nullable(Of Long),  _
                    ByVal Original__rbVoltL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbVolt2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbVoltL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbCurrL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbCurrL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbCurrL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbIbat As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbVbat As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbIbatMaxAv As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbFreq As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbLVbat As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbTempPerc As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbSigTamb As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbSigTchas As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbSigTexCon As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbExtSenTyp As Global.System.Nullable(Of Double),  _
                    ByVal Original__rbErrStatus As String) As Integer
            Return Me.Update(Original_ID, IdMeasDet, _rbVoltL1, _rbVolt2, _rbVoltL3, _rbCurrL1, _rbCurrL2, _rbCurrL3, _rbIbat, _rbVbat, _rbIbatMaxAv, _rbFreq, _rbLVbat, _rbTempPerc, _rbSigTamb, _rbSigTchas, _rbSigTexCon, _rbExtSenTyp, _rbErrStatus, Original_ID, Original_IdMeasDet, Original__rbVoltL1, Original__rbVolt2, Original__rbVoltL3, Original__rbCurrL1, Original__rbCurrL2, Original__rbCurrL3, Original__rbIbat, Original__rbVbat, Original__rbIbatMaxAv, Original__rbFreq, Original__rbLVbat, Original__rbTempPerc, Original__rbSigTamb, Original__rbSigTchas, Original__rbSigTexCon, Original__rbExtSenTyp, Original__rbErrStatus)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _sqlite_sequenceTableAdapter As sqlite_sequenceTableAdapter
        
        Private _tblAVTTestTableAdapter As tblAVTTestTableAdapter
        
        Private _tblCondTableAdapter As tblCondTableAdapter
        
        Private _tblMeasTableAdapter As tblMeasTableAdapter
        
        Private _tblMeasDetTableAdapter As tblMeasDetTableAdapter
        
        Private _tblMeasDetRbTableAdapter As tblMeasDetRbTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property sqlite_sequenceTableAdapter() As sqlite_sequenceTableAdapter
            Get
                Return Me._sqlite_sequenceTableAdapter
            End Get
            Set
                Me._sqlite_sequenceTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblAVTTestTableAdapter() As tblAVTTestTableAdapter
            Get
                Return Me._tblAVTTestTableAdapter
            End Get
            Set
                Me._tblAVTTestTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblCondTableAdapter() As tblCondTableAdapter
            Get
                Return Me._tblCondTableAdapter
            End Get
            Set
                Me._tblCondTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblMeasTableAdapter() As tblMeasTableAdapter
            Get
                Return Me._tblMeasTableAdapter
            End Get
            Set
                Me._tblMeasTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblMeasDetTableAdapter() As tblMeasDetTableAdapter
            Get
                Return Me._tblMeasDetTableAdapter
            End Get
            Set
                Me._tblMeasDetTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblMeasDetRbTableAdapter() As tblMeasDetRbTableAdapter
            Get
                Return Me._tblMeasDetRbTableAdapter
            End Get
            Set
                Me._tblMeasDetRbTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._sqlite_sequenceTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sqlite_sequenceTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sqlite_sequenceTableAdapter.Connection
                End If
                If ((Not (Me._tblAVTTestTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblAVTTestTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblAVTTestTableAdapter.Connection
                End If
                If ((Not (Me._tblCondTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblCondTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblCondTableAdapter.Connection
                End If
                If ((Not (Me._tblMeasTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblMeasTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblMeasTableAdapter.Connection
                End If
                If ((Not (Me._tblMeasDetTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblMeasDetTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblMeasDetTableAdapter.Connection
                End If
                If ((Not (Me._tblMeasDetRbTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblMeasDetRbTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblMeasDetRbTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblAVTTestTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblCondTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblMeasTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblMeasDetTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblMeasDetRbTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tblAVTTestTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblAVTTest.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblAVTTestTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblMeasTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblMeas.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblMeasTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblMeasDetTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblMeasDet.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblMeasDetTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.sqlite_sequence.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sqlite_sequenceTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblCondTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblCond.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblCondTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblMeasDetRbTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblMeasDetRb.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblMeasDetRbTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tblAVTTestTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblAVTTest.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblAVTTestTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblMeasTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblMeas.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblMeasTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblMeasDetTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblMeasDet.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblMeasDetTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.sqlite_sequence.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sqlite_sequenceTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblCondTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblCond.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblCondTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblMeasDetRbTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblMeasDetRb.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblMeasDetRbTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tblMeasDetRbTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblMeasDetRb.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblMeasDetRbTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblCondTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblCond.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblCondTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.sqlite_sequence.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sqlite_sequenceTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblMeasDetTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblMeasDet.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblMeasDetTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblMeasTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblMeas.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblMeasTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblAVTTestTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblAVTTest.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblAVTTestTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSet1) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._sqlite_sequenceTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sqlite_sequenceTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblAVTTestTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblAVTTestTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblCondTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblCondTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblMeasTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblMeasTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblMeasDetTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblMeasDetTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblMeasDetRbTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblMeasDetRbTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sqlite_sequenceTableAdapter, Me._sqlite_sequenceTableAdapter.Connection)
                    Me._sqlite_sequenceTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._sqlite_sequenceTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._sqlite_sequenceTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sqlite_sequenceTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sqlite_sequenceTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblAVTTestTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblAVTTestTableAdapter, Me._tblAVTTestTableAdapter.Connection)
                    Me._tblAVTTestTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._tblAVTTestTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._tblAVTTestTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblAVTTestTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblAVTTestTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblCondTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblCondTableAdapter, Me._tblCondTableAdapter.Connection)
                    Me._tblCondTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._tblCondTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._tblCondTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblCondTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblCondTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblMeasTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblMeasTableAdapter, Me._tblMeasTableAdapter.Connection)
                    Me._tblMeasTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._tblMeasTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._tblMeasTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblMeasTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblMeasTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblMeasDetTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblMeasDetTableAdapter, Me._tblMeasDetTableAdapter.Connection)
                    Me._tblMeasDetTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._tblMeasDetTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._tblMeasDetTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblMeasDetTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblMeasDetTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblMeasDetRbTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblMeasDetRbTableAdapter, Me._tblMeasDetRbTableAdapter.Connection)
                    Me._tblMeasDetRbTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._tblMeasDetRbTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._tblMeasDetRbTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblMeasDetRbTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblMeasDetRbTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                    Me._sqlite_sequenceTableAdapter.Connection = CType(revertConnections(Me._sqlite_sequenceTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._sqlite_sequenceTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblAVTTestTableAdapter) Is Nothing) Then
                    Me._tblAVTTestTableAdapter.Connection = CType(revertConnections(Me._tblAVTTestTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._tblAVTTestTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblCondTableAdapter) Is Nothing) Then
                    Me._tblCondTableAdapter.Connection = CType(revertConnections(Me._tblCondTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._tblCondTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblMeasTableAdapter) Is Nothing) Then
                    Me._tblMeasTableAdapter.Connection = CType(revertConnections(Me._tblMeasTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._tblMeasTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblMeasDetTableAdapter) Is Nothing) Then
                    Me._tblMeasDetTableAdapter.Connection = CType(revertConnections(Me._tblMeasDetTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._tblMeasDetTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblMeasDetRbTableAdapter) Is Nothing) Then
                    Me._tblMeasDetRbTableAdapter.Connection = CType(revertConnections(Me._tblMeasDetRbTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._tblMeasDetRbTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
